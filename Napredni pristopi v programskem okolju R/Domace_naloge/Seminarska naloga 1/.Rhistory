as.data.frame(
matrix(
unlist(
str_split(tmp, pattern = "SPLITTHIS")
),
nrow=length(
unlist(
str_split(tmp, pattern = "SPLITTHIS")[1]
)
)
)
),
row_number = 1
))
}
# function to catch errors
# adds NULL to list in lapply() if error
error_catch <- function (node, type=2) {
if (type == 1){
return(tryCatch(node_to_df(node), error=function(e) NULL))
} else if (type == 2) {
return(tryCatch(node_to_df2(node), error=function(e) NULL))
} else {
return(tryCatch(node_to_df2(node), error=function(e) NULL))
}
}
data_tmp <- lapply(top_100_nodes, error_catch, type=2)
# remove NULL values in list
# forgot why I added this
data_tmp <- data_tmp[lengths(data_tmp) != 0]
# finally transform data to correct types, etc.
data_final <- data.table::rbindlist(data_tmp, idcol = "index") %>%
as_tibble() %>%
select(-index) %>%
mutate(Znamka = as.factor(Znamka),
Letnik = as.integer(Letnik),
Kilometrina = as.integer(Kilometrina),
Tip_motorja = as.factor(Tip_motorja),
Menjalnik = as.factor(Menjalnik),
Motor = as.integer(Motor),
Moc = as.integer(Moc),
Cena = as.integer(Cena)) %>%
mutate(Letnik = if_else(Letnik == 0, max(Letnik), Letnik, Letnik))
# removes incomplete cases
data_final_no_na <- data_final[complete.cases(data_final),]
# samo vektorji glede na tip za lazje delo
fct_cols <- data_final %>% select_if(is.factor) %>% colnames()
num_cols <- data_final %>% select_if(is.numeric) %>% colnames()
# vse spremenljivke
all_vars <- c("Znamka",
"Letnik",
"Kilometrina",
"Tip_motorja",
"Menjalnik",
"Motor",
"Moc",
"Cena")
View(data_final_no_na)
?geom_vline
data_final_no_na["Cena",]
data_final_no_na[,"Cena"]
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
mean(data_final_no_na[ , "Cena"])
data_final_no_na[ , "Cena"]
mean(data_final_no_na[ , "Cena"])
data_final_no_na[ , "Cena"]
data_final_no_na[ , "Cena"][1]
data_final_no_na[ , "Cena"][[1]]
mean(data_final_no_na[ , "Cena"][[1]])
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp()
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
?sliderInput()
ggplot(data_final_no_na, aes(Cena)) + stat_ecdf()
data_final$Cena
sort(data_final$Cena)
plot(sort(data_final$Cena))
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
quantile(data_final_no_na$Cena)
quantile(data_final_no_na$Cena, probs = 0.66)
quantile(data_final_no_na$Cena, probs = 0.67)
quantile(data_final_no_na$Cena, probs = 1)
quantile(data_final_no_na$Cena, probs = 0.99)
?quantile
quantile(data_final_no_na$Cena, probs = 0)
quantile(data_final_no_na$Cena, probs = 0)[[1]]
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
?geom_bar
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
asdf <- c("alen", "mojca", "lea")
asdf[asdf != "jadranka"]
asdf[asdf != "lea"]
ggplot(data_final_no_na, aes_string("Cena", col="Tip_motorja")) + stat_ecdf()
ggplot(data_final_no_na, aes_string("Cena", col="Menjalnik")) + stat_ecdf()
ggplot(data_final_no_na, aes_string("Cena", col="Menjalnik")) + geom_qq()
ggplot(data_final_no_na, aes_string(sample="Cena", col="Menjalnik")) + geom_qq()
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
count(data_final_no_na)
count(data_final_no_na %>% group_by(Tip_motorja))
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
c("stack", "dodge", "fill")
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
?geom_histogram
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
ddply(data_final_no_na, "Tip_motorja", summarise, grp.mean=mean(cena))
ddply(data_final_no_na, "Tip_motorja", summarise, grp.mean=mean(cena))
library(ddply)
library(plyr)
library(shiny)
library(rvest)
library(plyr)
library(dplyr)
library(tidyr)
library(magrittr)
library(stringr)
library(ggplot2)
library(scales)
# get website
top_100_avti_net_full <- read_html("https://www.avto.net/Ads/results_100.asp?oglasrubrika=1&prodajalec=2")
# get car nodes
top_100_nodes <- top_100_avti_net_full %>%
html_nodes(xpath = "//div[@class='row bg-white position-relative GO-Results-Row GO-Shadow-B']")
# get URL for each car so we can extract ID for each ad IN CORRECT ORDER
# currently not used, but a way to ID ads as repeated - Future upgrade
top_100_ids_url <- top_100_nodes %>%
html_nodes(xpath="//a[@class='stretched-link']") %>%
html_attr("href") %>%
str_extract_all(pattern="id=\\d{8}") %>%
unlist()
node_to_df <- function(node) {
# Function to convert a single HTML node of a care to df row
# input:
#    - node: represents an HTML node with classes
# output:
#    - data.frame of nrow length 1 which is a transformation of data for a single car
# pre-cleaning data for data extraction
tmp <- c(str_match(node %>%
html_text() %>%
str_remove_all(pattern="\\r") %>%
str_remove_all(pattern="\\n") %>%
str_remove_all(pattern="\\t") %>%
str_trim() %>%
gsub("\\s+", " ", .) %>%
gsub("(km)(Gorivo)", "\\1 \\2", .) %>%
gsub("(motor)(Menjalnik)", "\\1 \\2", .) %>%
gsub("(motor)(Menjalnik)", "\\1 \\2", .) %>%
gsub("(menjalnik)(Motor)", "\\1 \\2", .),
"(.+)(1.registracija.+|Starost.+)(Gorivo.+)(Menjalnik.+)(Motor.+/ [0-9]+ KM)(.+)"))[-1] %>%
str_trim()
if (tmp[[2]] == "Starost NOVO") {
tmp[[2]] <- paste0(tmp[[2]], " SPLITTHISPrevoÅ¾enih 0") %>%
str_replace(pattern = "NOVO", replacement = "0000")
} else {
tmp[[2]] <- gsub("(1.registracija.+)(PrevoÅ¾enih.+)", "\\1SPLITTHIS\\2", tmp[[2]]) %>%
str_replace(pattern = "1.registracija", replacement = "Starost") %>%
str_remove(pattern = " km")
}
# some cars don't have km while not being new (registered this year)
if (!str_detect(tmp[[2]], "PrevoÅ¾enih.+")){
tmp[[2]] <- paste0(tmp[[2]], " SPLITTHISPrevoÅ¾enih 0")
}
tmp[[5]] <- gsub("(.+ccm, )(.+)", "\\1SPLITTHIS\\2", tmp[[5]])
tmp <- strsplit(tmp,"SPLITTHIS") %>%
unlist() %>%
str_trim()
# Only car brand (does not include model) - this is a possible upgrade down the road
tmp[1] <- tmp[1] %>%
str_extract(pattern="(Abarth|AEV|Aixam|Alfa Romeo|Alpine|Artega|Aston Martin|Audi|Austin|Autobianchi|Bentley|BMW|Borgward|Brilliance|Bugatti|Buick|Cadillac|Casalini|Chatenet|Chevrolet|Chrysler|Citroen|Cobra|Cupra|Dacia|Daewoo|DAF|Daihatsu|DKW|Dodge|Donkervoort|DS Automobiles|EV|Ferrari|Fiat|Fisker|Ford|GMC|Greatwall|Grecav|Hansa|Honda|Hummer|Hyundai|Infiniti|Iso|Isuzu|Iveco|JAC|Jaguar|JDM|Jeep|Kia|KTM|Lada|Lamborghini|Lancia|LandRover|LandWind|Lexus|Ligier|Lincoln|London Taxi|Lotus|LuAZ|Mahindra|Maruti|Maserati|Maybach|Mazda|McLaren|Mercedes-Benz|MG|Microcar|Mini|Mitsubishi|Morgan|MoskviÄ|Nissan|NSU|Oldsmobile|Opel|Peugeot|Piaggio|Plymouth|Polestar|Pontiac|Porsche|Proton|Puch|Renault|Replica|Rolls-Royce|Rosengart|Rover|Saab|Saturn|Seat|Shuanghuan|Simca|Smart|Spyker|SsangYong|Subaru|Suzuki|Å koda|Talbot|Tata|Tavria|Tazzari|Tesla|Toyota|Trabant|Triumph|TVR|UAZ|Vauxhall|Venturi|Volga|Volvo|Volkswagen|Wartburg|Westfield|Wiesmann|Zastava|ZAZ|Zhidou)") %>%
paste0("ZnamkaSPLITTHIS", .)
# Only 4 digit year of the car, 0000 if the car is brand new, dealt with when converting
# the column to integer
tmp[2] <- tmp[2] %>%
str_extract(pattern="\\d{4}") %>%
paste0("StarostSPLITTHIS", .)
# Any number of digits as a representation of km driven with the car
# if the car is brand new this is set to 0 beforehand
tmp[3] <- tmp[3] %>%
str_extract(pattern="[0-9]+") %>%
paste0("KilometrinaSPLITTHIS", .)
# What type of engine does the car have
tmp[4] <- tmp[4] %>%
str_replace(pattern = " ", replacement = "SPLITTHIS") %>%
str_replace(pattern = "Gorivo", replacement = "Tip_motorja")
# What type of transmission does the car have
tmp[5] <- tmp[5] %>%
str_replace(pattern = " ", replacement = "SPLITTHIS")
# The displacement/size of the engine in cubic centimeters
tmp[6] <- tmp[6] %>%
str_replace(pattern = " ccm,", replacement = "") %>%
str_replace(pattern = " ", replacement = "SPLITTHIS")
# The power of the engine in kW
tmp[7] <- tmp[7] %>%
str_replace(pattern = " kW.+", replacement = "") %>%
paste0("MocSPLITTHIS", .)
# the largest price of the car
#   this takes the first price found
#       this is usually the price without any sort of sales, or leasing sales etc.
#       but it could be wrong at times I assume - possible upgrade is to do more checks
tmp[8] <- tmp[8] %>%
str_extract(pattern = "([0-9]+\\.\\d{3}\\.\\d{3} â¬|[0-9]+\\.\\d{3} â¬|\\d{3} â¬)") %>%
str_remove(pattern = " â¬") %>%
str_remove(pattern = "\\.") %>%
paste0("CenaSPLITTHIS", .)
# converting our list of lists to matrix to data.frame of correct size
# then selecting first row as names for the columns
return(
janitor::row_to_names(
as.data.frame(
matrix(
unlist(
str_split(tmp, pattern = "SPLITTHIS")
),
nrow=length(
unlist(
str_split(tmp, pattern = "SPLITTHIS")[1]
)
)
)
),
row_number = 1
))
}
node_to_df2 <- function(node) {
# Function to convert a single HTML node of a care to df row
# input:
#    - node: represents an HTML node with classes
# output:
#    - data.frame of nrow length 1 which is a transformation of data for a single car
# pre-cleaning data for data extraction
# get each string cleaned and separated
# full_string <- top_100_nodes[[30]] %>%
full_string <- node %>%
html_text() %>%
str_remove_all(pattern="\\r") %>%
str_remove_all(pattern="\\n") %>%
str_remove_all(pattern="\\t") %>%
str_trim() %>%
gsub("\\s+", " ", .)
# get age 2 strings
if (str_detect(full_string, "(1.registracija \\d{4}|Starost NOVO)")){
age_string_extr <- str_extract(full_string, "(1.registracija \\d{4}|Starost NOVO)")
if (age_string_extr == "Starost NOVO"){
age_string_mod <- paste0("LetnikSPLITTHIS", format(Sys.Date(), "%Y"))
} else {
age_string_mod <- paste0("LetnikSPLITTHIS",
str_extract(age_string_extr, "\\d{4}"))
}
} else {
age_string_mod <- "LetnikSPLITTHISNA"
}
# get mileage 2 strings
if (str_detect(full_string, "PrevoÅ¾enih [0-9]+ km")){
mile_string_extr <- str_extract(full_string, "PrevoÅ¾enih [0-9]+ km")
mile_string_mod <- paste0("KilometrinaSPLITTHIS",
str_extract(mile_string_extr, "[0-9]+"))
} else {
if (age_string_extr == "Starost NOVO"){
mile_string_extr <- NA_character_
mile_string_mod <- "KilometrinaSPLITTHIS0"
} else{
mile_string_extr <- NA_character_
mile_string_mod <- "KilometrinaSPLITTHISNA"
}
}
# get engine type 2 strings
if (str_detect(full_string, "Gorivo.+(motor|plin|pogon)")){
engt_string_extr <- str_extract(full_string, "Gorivo.+?(motor|plin|pogon)")
engt_string_mod <- paste0("Tip_motorjaSPLITTHIS",
str_remove(engt_string_extr, "Gorivo "))
} else {
engt_string_extr <- NA_character_
engt_string_mod <- "Tip_motorjaSPLITTHISNA"
}
# get gearbox 2 strings
if (str_detect(full_string, "Menjalnik.+menjalnik")){
gear_string_extr <- str_extract(full_string, "Menjalnik.+?menjalnik")
gear_string_mod <- paste0("MenjalnikSPLITTHIS",
str_remove(gear_string_extr, "Menjalnik "))
} else {
gear_string_extr <- NA_character_
gear_string_mod <- "MenjalnikSPLITTHISNA"
}
# get engine size 2 strings
if (str_detect(full_string, " [0-9]+ ccm")){
engs_string_extr <- str_extract(full_string, " [0-9]+ ccm")
engs_string_mod <- paste0("MotorSPLITTHIS",
str_extract(engs_string_extr, "[0-9]+"))
} else {
engs_string_extr <- NA_character_
engs_string_mod <- "MotorSPLITTHISNA"
}
# get engine power in kW
if (str_detect(full_string, " [0-9]+ kW / ")){
engp_string_extr <- str_extract(full_string, " [0-9]+ kW / ")
engp_string_mod <- paste0("MocSPLITTHIS",
str_extract(engp_string_extr, "[0-9]+"))
} else {
engp_string_extr <- NA_character_
engp_string_mod <- "MocSPLITTHISNA"
}
# get price in EUR
if (str_detect(full_string, "([0-9]+\\.\\d{3}\\.\\d{3} â¬|[0-9]+\\.\\d{3} â¬|\\d{3} â¬)")){
price_string_extr <- str_extract(full_string,
"([0-9]+\\.\\d{3}\\.\\d{3} â¬|[0-9]+\\.\\d{3} â¬|\\d{3} â¬)") %>%
str_remove(pattern = " â¬") %>%
str_remove(pattern = "\\.")
price_string_mod <- paste0("CenaSPLITTHIS",
str_extract(price_string_extr, "[0-9]+"))
} else {
price_string_extr <- NA_character_
price_string_mod <- "CenaSPLITTHISNA"
}
# create vectors of extracted data and modified data
mod_data <- c(age_string_mod,
mile_string_mod,
engt_string_mod,
gear_string_mod,
engs_string_mod,
engp_string_mod,
price_string_mod)
extr_data <- c(age_string_extr,
mile_string_extr,
engt_string_extr,
gear_string_extr,
engs_string_extr,
engp_string_extr,
price_string_extr)
# create a matrix of extracted data and modified data
full_matrix <- matrix(c(extr_data, mod_data),
ncol = 2,
byrow = FALSE
)
# Get car brand
# [1,1] for first extracted element where there are no NAs, hence data exists
# [[1]] for first element of list as str_split returns a list of vectors
# [1] for first element of vector
str_split(full_string,
pattern=full_matrix[complete.cases(full_matrix), ][1,1])[[1]][1]
car_brand <- str_split(full_string,
pattern=full_matrix[complete.cases(full_matrix), ][1,1])[[1]][1] %>%
str_extract(pattern="(Abarth|AEV|Aixam|Alfa Romeo|Alpine|Artega|Aston Martin|Audi|Austin|Autobianchi|Bentley|BMW|Borgward|Brilliance|Bugatti|Buick|Cadillac|Casalini|Chatenet|Chevrolet|Chrysler|Citroen|Cobra|Cupra|Dacia|Daewoo|DAF|Daihatsu|DKW|Dodge|Donkervoort|DS Automobiles|EV|Ferrari|Fiat|Fisker|Ford|GMC|Greatwall|Grecav|Hansa|Honda|Hummer|Hyundai|Infiniti|Iso|Isuzu|Iveco|JAC|Jaguar|JDM|Jeep|Kia|KTM|Lada|Lamborghini|Lancia|LandRover|LandWind|Lexus|Ligier|Lincoln|London Taxi|Lotus|LuAZ|Mahindra|Maruti|Maserati|Maybach|Mazda|McLaren|Mercedes-Benz|MG|Microcar|Mini|Mitsubishi|Morgan|MoskviÄ|Nissan|NSU|Oldsmobile|Opel|Peugeot|Piaggio|Plymouth|Polestar|Pontiac|Porsche|Proton|Puch|Renault|Replica|Rolls-Royce|Rosengart|Rover|Saab|Saturn|Seat|Shuanghuan|Simca|Smart|Spyker|SsangYong|Subaru|Suzuki|Å koda|Talbot|Tata|Tavria|Tazzari|Tesla|Toyota|Trabant|Triumph|TVR|UAZ|Vauxhall|Venturi|Volga|Volvo|Volkswagen|Wartburg|Westfield|Wiesmann|Zastava|ZAZ|Zhidou)") %>%
paste0("ZnamkaSPLITTHIS", .)
tmp <- c(car_brand, mod_data)
# converting our list of lists to matrix to data.frame of correct size
# then selecting first row as names for the columns
return(
janitor::row_to_names(
as.data.frame(
matrix(
unlist(
str_split(tmp, pattern = "SPLITTHIS")
),
nrow=length(
unlist(
str_split(tmp, pattern = "SPLITTHIS")[1]
)
)
)
),
row_number = 1
))
}
# function to catch errors
# adds NULL to list in lapply() if error
error_catch <- function (node, type=2) {
if (type == 1){
return(tryCatch(node_to_df(node), error=function(e) NULL))
} else if (type == 2) {
return(tryCatch(node_to_df2(node), error=function(e) NULL))
} else {
return(tryCatch(node_to_df2(node), error=function(e) NULL))
}
}
data_tmp <- lapply(top_100_nodes, error_catch, type=2)
# remove NULL values in list
# forgot why I added this
data_tmp <- data_tmp[lengths(data_tmp) != 0]
# finally transform data to correct types, etc.
data_final <- data.table::rbindlist(data_tmp, idcol = "index") %>%
as_tibble() %>%
select(-index) %>%
mutate(Znamka = as.factor(Znamka),
Letnik = as.integer(Letnik),
Kilometrina = as.integer(Kilometrina),
Tip_motorja = as.factor(Tip_motorja),
Menjalnik = as.factor(Menjalnik),
Motor = as.integer(Motor),
Moc = as.integer(Moc),
Cena = as.integer(Cena)) %>%
mutate(Letnik = if_else(Letnik == 0, max(Letnik), Letnik, Letnik))
# removes incomplete cases
data_final_no_na <- data_final[complete.cases(data_final),]
# samo vektorji glede na tip za lazje delo
fct_cols <- data_final %>% select_if(is.factor) %>% colnames()
num_cols <- data_final %>% select_if(is.numeric) %>% colnames()
# vse spremenljivke
all_vars <- c("Znamka",
"Letnik",
"Kilometrina",
"Tip_motorja",
"Menjalnik",
"Motor",
"Moc",
"Cena")
ddply(data_final_no_na, "Tip_motorja", summarise, grp.mean=mean(cena))
ddply(data_final_no_na, "Tip_motorja", summarise, grp.mean=mean(Cena))
ddply(data_final_no_na, "Tip_motorja", summarise, grp.mean=mean("Cena"))
all_vars <- c("Znamka",
"Letnik",
"Kilometrina",
"Tip_motorja",
"Menjalnik",
"Motor",
"Moc",
"Cena")
type_vars <- c("Factor",
"Integer",
"Integer",
"Factor",
"Factor",
"Integer",
"Integer",
"Integer")
desc_vars <- c("Znamka avtomobila",
"Letnica ko je bil avto registriran (v primeru novega vozila trenutno leto)",
"PrevoÅ¾eni kilometri z avtomobilom (v primeru novega vozila nastavljeno na 0)",
"Vrsta motorja oz. na kakÅ¡no gorivo se poganja avtomobil",
"Vrsta menjalnika v avtomobilu",
"Velikost motorja v kubiÄnih centimetrih (ccm)",
"MoÄ motorja v kW",
"Cena avtomobila v EUR")
desc_table <- cbind(all_vars, type_vars, desc_vars)
colnames(desc_table) <- c("Spremenljivka", "Tip spremenljivke", "Opis spremenljivke")
View(desc_table)
?renderTable
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
?cat
cat("Znamka\n")
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
sqrt((100000 - data_final_no_na$Kilometrina)^2 + (10000 - data_final_no_na$Cena)^2)
dist <- sqrt((100000 - data_final_no_na$Kilometrina)^2 + (10000 - data_final_no_na$Cena)^2)
dist
min(dist)
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
data_final_no_na[ , "Cena"][[1]]
data_final_no_na[ , "Cena"][1]
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
runApp('C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1')
sqrt((2010 - data_final_no_na[ , "Letnik"][[1]])^2 + (10000 - data_final_no_na[ , "Cena"][[1]])^2)
which.min(sqrt((2010 - data_final_no_na[ , "Letnik"][[1]])^2 + (10000 - data_final_no_na[ , "Cena"][[1]])^2))
data_final_no_na$Znamka[which.min(sqrt((2010 - data_final_no_na[ , "Letnik"][[1]])^2 + (10000 - data_final_no_na[ , "Cena"][[1]])^2))]
data_final_no_na$Znamka[which.min(sqrt((2010 - data_final_no_na[ , "Letnik"][[1]])^2 + (10000 - data_final_no_na[ , "Cena"][[1]])^2))][1]
data_final_no_na$Znamka[which.min(sqrt((2010 - data_final_no_na[ , "Letnik"][[1]])^2 + (10000 - data_final_no_na[ , "Cena"][[1]])^2))][[1]]
data_final_no_na$Znamka[which.min(sqrt((2010 - data_final_no_na[ , "Letnik"][[1]])^2 + (10000 - data_final_no_na[ , "Cena"][[1]])^2))-1]
setwd("C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Napredni pristopi v programskem okolju R/Domace_naloge/Seminarska naloga 1")
source('testing/app.R')
runApp()
runApp()
if (nrow(point) == 0) return(NULL)
source('testing/app.R')
as_tibble(mtcars)
runApp()
nearPoints(data_final_no_na,
hover,
xvar="Cena",
yvar="Kilometrina",
threshold = 120,
maxpoints = 1,
addDist = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(ggplot(data_final_no_na, aes_string("Cena")))
runApp()
runApp()

sample_size <- 10^5
probs <- c(q^5,
5*q^4*(1-q),
10*q^3*(1-q)^2,
10*q^2*(1-q)^3,
5*q*(1-q)^4,
(1-q)^5)
tmp <- sample(1:6, sample_size, replace=TRUE, prob=probs)
var(tmp)
mean(tmp)
ggplot(NULL, aes(x=tmp)) +
geom_bar()
setwd("C:/Users/LaZyM/Desktop/advent_of_code_2020/day_3")
# read data
df <- read.table("input.txt")
View(df)
?read.fwf
# read data
df <- read.fwf("input.txt")
# read data
df <- read.fwf("input.txt", width=31)
View(df)
# read data
df <- read.fwf("input.txt", width=1)
View(df)
# read data
df <- read.fwf("input.txt", widths=1)
# read data
df <- read.fwf("input.txt", widths=rep(1,31))
# read data
rep(1)
# read data
rep(1,31)
# read data
unlist(rep(1,31))
# read data
(rep(1,31))
# read data
rep(1,31)
# read data
df <- read.fwf("input.txt", widths=c(1))
c(1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1)
length(c(1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1))
df <- read.fwf("input.txt", widths=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
read.fwf("input.txt", widths=rep(1, 31))
read.fwf("input.txt", widths=rep(1, 31), colClasses = "character")
read.table("input.txt", h=FALSE, colClasses = "character")
read.table("input.txt", h=FALSE, colClasses = "character", as.is = TRUE)
?readLines
fileConn<-file("input.txt")
writeLines(fileConn)
readLines(fileConn)
close(fileConn)
# read data
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data
data.frame(data)
255/31
31/3
library(tidyverse)
data.frame(data) %>% rowwise() %>% strrep(data,26)
data.frame(data) %>% rowwise() %>% strrep(data)
as_tibble(data.frame(data))
data <- as_tibble(data.frame(data))
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
rm(df)
data <- as_tibble(data.frame(data))
View(data)
tmp <- data[1:3]
tmp <- data[1][1:3]
tmp <- head(data)
tmp
tmp %>% str_dup(data, 2)
?str_dup
tmp %>% str_dup(data)
tmp %>% rowwise() %>% str_dup(data)
tmp %>% rowwise() %>% str_dup(data, 2)
data$multiplied <- str_dup(data$data, 2)
data
323/31
323/11
data$multiplied <- str_dup(data$data, 30)
data$multiplied
data$multiplied[2]
data$multiplied[2][2]
strsplit(data$multiplied[2], "")[[1]]
strsplit(data$multiplied[2], "")[[1]][2]
strsplit(data$multiplied, "")[[1]]
strsplit(tmp$multiplied, "")[[1]]
View(data)
data$multiplied
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data <- as_tibble(data.frame(data))
data$multiplied <- str_dup(data$data, 30)
i <- 1
for (row in data$multiplied) {
print(strsplit(row, "")[[1]][i])
i <- i + 3
}
paste0("","2")
paste0("",NA)
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data <- as_tibble(data.frame(data))
data$multiplied <- str_dup(data$data, 30)
i <- 1
string_ <- ""
for (row in data$multiplied) {
string_ <- paste0(string_, strsplit(row, "")[[1]][i])
i <- i + 3
}
string_
str_count(string_, "#")
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
length("..#############..#######..#.#####.#.######..#########..##########.####.##########.#########.###############.#########.#.###.##########.#.######.#####.#########.########.##########.#.###..###.###.########..########.##################.###.####################.######.###.####.###.##..####.###.#########.####.#.##")
nchar("..#############..#######..#.#####.#.######..#########..##########.####.##########.#########.###############.#########.#.###.##########.#.######.#####.#########.########.##########.#.###..###.###.########..########.##################.###.####################.######.###.####.###.##..####.###.#########.####.#.##")
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data <- as_tibble(data.frame(data))
data$multiplied <- str_dup(data$data, 32)
i <- 1
string_ <- ""
for (row in data$multiplied) {
string_ <- paste0(string_, strsplit(row, "")[[1]][i])
i <- i + 3
}
str_count(string_, "#")
31/7
323/5
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data <- as_tibble(data.frame(data))
### part 1
# multiply string 80 times (for right 7 part)
data$multiplied <- str_dup(data$data, 70)
# counter for location in rows
i <- 1
# string for saving 3 right 1 down
string_31 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_ <- paste0(string_, strsplit(row, "")[[1]][i])
# change the location
i <- i + 3
}
# count nubmer of trees
str_count(string_, "#")
### part 2
# counter for location in rows
i <- 1
# string for saving 1 right 1 down
string_11 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_11 <- paste0(string_, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_51 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_51 <- paste0(string_, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_71 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_71 <- paste0(string_, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
i <- 1
# string for saving 3 right 1 down
string_31 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_31 <- paste0(string_, strsplit(row, "")[[1]][i])
# change the location
i <- i + 3
}
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data <- as_tibble(data.frame(data))
### part 1
# multiply string 80 times (for right 7 part)
data$multiplied <- str_dup(data$data, 70)
# counter for location in rows
i <- 1
# string for saving 3 right 1 down
string_31 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_31 <- paste0(string_31, strsplit(row, "")[[1]][i])
# change the location
i <- i + 3
}
# count nubmer of trees
str_count(string_31, "#")
### part 2
# counter for location in rows
i <- 1
# string for saving 1 right 1 down
string_11 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_11 <- paste0(string_11, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_51 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_51 <- paste0(string_51, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_71 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_71 <- paste0(string_71, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data <- as_tibble(data.frame(data))
### part 1
# multiply string 80 times (for right 7 part)
data$multiplied <- str_dup(data$data, 70)
# counter for location in rows
i <- 1
# string for saving 3 right 1 down
string_31 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_31 <- paste0(string_31, strsplit(row, "")[[1]][i])
# change the location
i <- i + 3
}
# count nubmer of trees
str_count(string_31, "#")
### part 2
# counter for location in rows
i <- 1
# string for saving 1 right 1 down
string_11 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_11 <- paste0(string_11, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_51 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_51 <- paste0(string_51, strsplit(row, "")[[1]][i])
# change the location
i <- i + 5
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_71 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_71 <- paste0(string_71, strsplit(row, "")[[1]][i])
# change the location
i <- i + 7
}
str_count(string_11, "#")
str_count(string_31, "#")
str_count(string_51, "#")
str_count(string_71, "#")
data$multiplied[seq(1, length(data$multiplied), 2)]
323/2
asdf <- data$multiplied[seq(1, length(data$multiplied), 2)]
head(asdf)
i <- 1
# string for saving 5 right 1 down
string_12 <- ""
# loop over every second row
for (row in data$multiplied[seq(1, length(data$multiplied), 2)]) {
# get i-th char of row and concat it to string_
string_12 <- paste0(string_12, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
str_count(string_11, "#") * str_count(string_31, "#") * str_count(string_51, "#") * str_count(string_71, "#") * str_count(string_12, "#")
fileConn<-file("input.txt")
data <- readLines(fileConn)
close(fileConn)
data <- as_tibble(data.frame(data))
### part 1
# multiply string 80 times (for right 7 part)
data$multiplied <- str_dup(data$data, 100)
# counter for location in rows
i <- 1
# string for saving 3 right 1 down
string_31 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_31 <- paste0(string_31, strsplit(row, "")[[1]][i])
# change the location
i <- i + 3
}
# count nubmer of trees
str_count(string_31, "#")
### part 2
# counter for location in rows
i <- 1
# string for saving 1 right 1 down
string_11 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_11 <- paste0(string_11, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_51 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_51 <- paste0(string_51, strsplit(row, "")[[1]][i])
# change the location
i <- i + 5
}
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_71 <- ""
# loop over every row
for (row in data$multiplied) {
# get i-th char of row and concat it to string_
string_71 <- paste0(string_71, strsplit(row, "")[[1]][i])
# change the location
i <- i + 7
}
####################
# counter for location in rows
i <- 1
# string for saving 5 right 1 down
string_12 <- ""
# loop over every second row
for (row in data$multiplied[seq(1, length(data$multiplied), 2)]) {
# get i-th char of row and concat it to string_
string_12 <- paste0(string_12, strsplit(row, "")[[1]][i])
# change the location
i <- i + 1
}
str_count(string_11, "#") * str_count(string_31, "#") * str_count(string_51, "#") * str_count(string_71, "#") * str_count(string_12, "#")
setwd("C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Osnove teoreticne statistike/Domace_naloge/naloga_1")
# Chunk 1
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo=params$printcode, results=params$printresults, warning=FALSE, message=FALSE)
# importing required library
library(tidyverse)
# Chunk 2
# setting seed for reproducibility
set.seed(8)
# define q
q <- 0.2
# define sample size
sample_size <- 10^5
# define probabilities
probs <- c(q^5,
5*q^4*(1-q),
10*q^3*(1-q)^2,
10*q^2*(1-q)^3,
5*q*(1-q)^4,
(1-q)^5)
# create one sample
tmp <- sample(1:6, sample_size, replace=TRUE, prob=probs)
# get variance
# should be 1/n instead of 1/n-1 but the sample is large enough not to matter
var(tmp)
# get expected value
mean(tmp)
# Chunk 3
ggplot(NULL, aes(x=tmp)) +
geom_bar()
expected <- replicate(1000,mean(sample(1:6, sample_size, replace=TRUE, prob=probs)))
# variance <- replicate(1000,var(sample(1:6, sample_size, replace=TRUE, prob=probs)))
hist(expected)
hist(expected,nclass=30)
expected <- replicate(1000,mean(sample(1:6, sample_size, replace=TRUE, prob=probs)))
variance <- replicate(1000,var(sample(1:6, sample_size, replace=TRUE, prob=probs)))
hist(variance)
1772+2429+1291+425+1106+1591+1608
10222/7
ggplot(NULL, aes(x=expected)) +
geom_histogram()
ggplot(NULL, aes(x=variance)) +
geom_histogram()
ggplot(NULL, aes(x=expected)) +
geom_histogram(bins=20)
ggplot(NULL, aes(x=variance)) +
geom_histogram(bins=20)
ggplot(NULL, aes(x=variance)) +
geom_histogram(bins=20, col="white")
ggplot(NULL, aes(x=variance)) +
geom_histogram(bins=20, col="lightgray")
mean()xpected
mean(expected)
mean(variance)

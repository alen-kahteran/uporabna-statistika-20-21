ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_hline(x)
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_vline(xintercept=x)
x
smpl <- rpois(2^12, lambda=lambda)
x <- quantile(smpl, probs=0.05)
x
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_vline(xintercept=x)
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=20)
geom_vline(xintercept=x)
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=20) +
geom_vline(xintercept=x)
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=20) +
geom_vline(xintercept=x,
col="red")
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=20) +
geom_vline(xintercept=x,
col="red",
linetype="dashed")
length(table(smpl))
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=length(table(smpl))) +
geom_vline(xintercept=x,
col="red",
linetype="dashed")
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=50) +
geom_vline(xintercept=x,
col="red",
linetype="dashed")
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=30) +
geom_vline(xintercept=x,
col="red",
linetype="dashed")
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_histogram(bins=20) +
geom_vline(xintercept=x,
col="red",
linetype="dashed")
2^12
?ppois
ppois(38, lambda=lambda)
ppois(39, lambda=lambda)
?quantile
n = 10^5
sim = rpois(n, 50)
st_h = NULL
for (i in min(sim):max(sim)) {
if ((sum(sim <= i)/n)<0.025){
st_h = i
} else{
next
}
}
st_h
x <- qpois(0.05, lambda=lambda)
x
x <- qpois(0.05, lambda=lambda)
qpois(0.05, lambda=lambda)
ppois(39, lambda)
x <- ppois(39, lambda=lambda)
x <- qpois(0.05, lambda=lambda) - 1 # -1 Because it returns is the smallest integer x such
# that P(X ≤ x) ≥ p.
x
ppois(39, lambda=lambda)
quantile(smpl, probs=0.05)
smpl <- replicate(2^14, sum(rpois(8, lambda=lambda)))
smpl
smpl <- replicate(2^14, sum(rpois(8, lambda=lambda)))
x <- quantile(smpl, probs=0.05) - 1 # -1 similarly as above for qpois
x
38*8
x <- quantile(smpl, probs=0.05) - 1 # -1 similarly as above for qpois
x
smpl <- replicate(2^14, sum(rpois(8, lambda=lambda)))
x <- quantile(smpl, probs=0.05) - 1 # -1 similarly as above for qpois
x
ppois(366, lambda=8*lambda)
ppois(367, lambda=8*lambda)
x <- qpois(0.05, lambda=lambda*8) - 1 # -1 Because it returns the smallest integer x such
# that P(X ≤ x) ≥ p.
x
replicate(2^11, mean(rpois(8, lambda=lambda)))
mean(replicate(2^11, mean(rpois(8, lambda=lambda))))
means <- replicate(2^11, mean(rpois(8, lambda=lambda)))
ggplot(data.frame(x=means), aes(x)) +
geom_histogram(aes(y=..density..),
bins=20) +
stat_function(fun=dnorm,
geom="line",
col="steelblue"
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda/8)),
aes(colour = "Normalna"))
means <- replicate(2^11, mean(rpois(8, lambda=lambda)))
ggplot(data.frame(x=means), aes(x)) +
geom_histogram(aes(y=..density..),
bins=20) +
stat_function(fun=dnorm,
geom="line",
col="steelblue",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda/8)),
aes(colour = "Normalna"))
n = 8 # sample size
sim = rpois(n, 50) # simulation
par(mfrow = c(1, 2))
mean(sim)
boxplot(sim, ylab = "Število naročil", main = "")
abline(h = 50, col = "blue")
abline(h= mean(sim), col = "red")
legend("topleft", legend=c("E(X)", "Povprečje"),
col=c("blue", "red"), lty=1:2, cex=0.8)
hist(sim, freq = F, ylab = "Delež v vzorcu",
xlab = "Število naročil",
main = "")
abline(v = 50, col = "blue")
abline(v= mean(sim), col = "red")
legend("topleft", 0.025, legend=c("E(X)", "Povprečje"),
col=c("blue", "red"), lty=1:2, cex=0.8)
lam = 50
n = 8
sp_meja = round(lam - 1.96*sqrt(50/n), 0)
sp_meja
n = 10^5
sim = rpois(n, 8*50)
st_dan = NULL
for (i in min(sim):max(sim)) {
if ((sum(sim <= i)/n)<0.025){
st_dan = i
} else{
next
}
}
st_dan
n = 8 # sample size
sim = rpois(n, 50) # simulation
par(mfrow = c(1, 2))
mean(sim)
n = 8 # sample size
sim = rpois(n, 50) # simulation
par(mfrow = c(1, 2))
mean(sim)
n = 8 # sample size
sim = rpois(n, 50) # simulation
par(mfrow = c(1, 2))
mean(sim)
n = 8 # sample size
sim = rpois(n, 50) # simulation
par(mfrow = c(1, 2))
mean(sim)
n = 8 # sample size
sim = rpois(n, 50) # simulation
par(mfrow = c(1, 2))
mean(sim)
n = 8 # sample size
sim = rpois(n, 50) # simulation
par(mfrow = c(1, 2))
mean(sim)
boxplot(sim, ylab = "Število naročil", main = "")
abline(h = 50, col = "blue")
abline(h= mean(sim), col = "red")
legend("topleft", legend=c("E(X)", "Povprečje"),
col=c("blue", "red"), lty=1:2, cex=0.8)
hist(sim, freq = F, ylab = "Delež v vzorcu",
xlab = "Število naročil",
main = "")
abline(v = 50, col = "blue")
abline(v= mean(sim), col = "red")
legend("topleft", 0.025, legend=c("E(X)", "Povprečje"),
col=c("blue", "red"), lty=1:2, cex=0.8)
366/8
ppois(1.1 * lambda*8, lambda=lambda*8)
ppois(1.1 * lambda*8, lambda=lambda*8, lower.tail=FALSE)
?ppois
ppois(439, lambda=lambda*8, lower.tail=FALSE)
ppois(440, lambda=lambda*8, lower.tail=FALSE)
ggplot(data.frame(x=pois_sample), aes(x, col="green")) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda)),
aes(colour = "Normalna")) +
stat_function(fun=dpois,
geom="point",
n=length(table(pois_sample))+6, # no idea why 6 works, but it does.
alpha=1,
args=list(lambda=lambda),
aes(colour = "Poisson")) +
scale_colour_manual("Legenda", values = c("steelblue", "darkred")) +
labs(y="Gostota")
ggplot(data.frame(x=pois_sample), aes(x, col="green")) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda)),
aes(colour = "Normalna")) +
stat_function(fun=dpois,
geom="point",
n=length(table(pois_sample))+6, # no idea why 6 works, but it does.
alpha=1,
args=list(lambda=lambda),
aes(colour = "Poisson")) +
scale_colour_manual("Legenda", values = c("green", "steelblue", "darkred")) +
labs(y="Gostota")
ggplot(data.frame(x=pois_sample), aes(x)) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda)),
aes(colour = "Normalna")) +
stat_function(fun=dpois,
geom="point",
n=length(table(pois_sample))+6, # no idea why 6 works, but it does.
alpha=1,
args=list(lambda=lambda),
aes(colour = "Poisson")) +
scale_colour_manual("Legenda", values = c("darkgreen", "steelblue", "darkred")) +
labs(y="Gostota")
ggplot(data.frame(x=pois_sample), aes(x, col="darkgreen")) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda)),
aes(colour = "Normalna")) +
stat_function(fun=dpois,
geom="point",
n=length(table(pois_sample))+6, # no idea why 6 works, but it does.
alpha=1,
args=list(lambda=lambda),
aes(colour = "Poisson")) +
scale_colour_manual("Legenda", values = c("darkgreen", "steelblue", "darkred")) +
labs(y="Gostota")
ggplot(data.frame(x=pois_sample), aes(x, col="darkgreen")) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda)),
aes(colour = "Normalna")) +
stat_function(fun=dpois,
geom="point",
n=length(table(pois_sample))+6, # no idea why 6 works, but it does.
alpha=1,
args=list(lambda=lambda),
aes(colour = "Poisson")) +
scale_colour_manual("Legenda", values = c("Porazdelitev", "steelblue", "darkred")) +
labs(y="Gostota")
ggplot(data.frame(x=pois_sample), aes(x, col="Vzorčna porazdelitev")) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda)),
aes(colour = "Normalna")) +
stat_function(fun=dpois,
geom="point",
n=length(table(pois_sample))+6, # no idea why 6 works, but it does.
alpha=1,
args=list(lambda=lambda),
aes(colour = "Poisson")) +
scale_colour_manual("Legenda", values = c("darkgreen", "steelblue", "darkred")) +
labs(y="Gostota")
ggplot(data.frame(x=pois_sample), aes(x, col="Vzorčna porazdelitev")) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda)),
aes(colour = "Normalna")) +
stat_function(fun=dpois,
geom="point",
n=length(table(pois_sample))+6, # no idea why 6 works, but it does.
alpha=1,
args=list(lambda=lambda),
aes(colour = "Poisson")) +
scale_colour_manual("Legenda", values = c("steelblue", "darkred", "darkgreen")) +
labs(y="Gostota")
smpl <- rpois(2^14, lambda=lambda)
x <- quantile(smpl, probs=0.05)
x
ggplot(data.frame(x_data=smpl), aes(x_data)) +
geom_density() +
geom_vline(xintercept=x,
col="red",
linetype="dashed") +
labs(y="Frekvenca",
x="x")
means <- replicate(2^11, mean(rpois(8, lambda=lambda)))
ggplot(data.frame(x=means), aes(x)) +
geom_density() +
stat_function(fun=dnorm,
geom="line",
col="steelblue",
alpha=1,
args=list(mean=lambda, sd=sqrt(lambda/8)))
library(car)
library(MASS)
Cars93$Poraba<-235.21/Cars93$MPG.highway  # v l/100 km
Cars93$Masa<-Cars93$Weight*0.45359/100    # v 100 kg
Cars93$Prostornina<-Cars93$EngineSize     # v litih
Cars93$Moc<-Cars93$Horsepower             # v KM
Cars93$Poreklo<-Cars93$Origin
Cars93$Tip<-Cars93$Type
avti <- subset(Cars93, select=c(Poraba, Masa, Prostornina, Moc, Poreklo, Tip))
rownames(avti)<-Cars93$Make   ### identifikator vozila na slikah
#  formule za vse možne modele
nap.sprem<-names(avti)
(nap.sprem<-nap.sprem[!nap.sprem %in% c("Poraba")])
n<-length(nap.sprem)
id<-unlist(lapply(1:n, function(i) combn(1:n, i, simplify=FALSE)), recursive=FALSE)
id
formule<-sapply(id, function(i) paste("Poraba~", paste(nap.sprem[i], collapse="+")))
formule[1:10]
mod.nul<-lm(Poraba~1, data=avti)
step<-stepAIC(mod.nul, scope=~H2S+Lactic+Acetic, direction="forward")
step<-stepAIC(mod.nul, scope=~Masa+Prostornina+Moc+Poreklo+Tip, direction="forward")
mod.polni<-lm(Poraba~Masa+Prostornina+Moc+Poreklo+Tip, data=avti)
step<-stepAIC(mod.polni, direction="backward")
mod.prvi<-lm(Poraba~Masa, data=cheese)
step<-stepAIC(mod.prvi, scope=~H2S+Lactic+Acetic, direction="both")
mod.prvi<-lm(Poraba~Masa, data=avti)
step<-stepAIC(mod.prvi, scope=~Masa+Prostornina+Moc+Poreklo+Tip, direction="both")
step
anova(step)
AIC<-numeric()
formule
AIC<-numeric()
for (i in (1:length(formule))){
mod<-lm(formule[i], data=avti)
AIC[i]<-AIC(mod)
}
data.frame(formule, AIC=round(AIC,1))
data.frame(formule, AIC=round(AIC,1)) %>% filter(AIC == min(AIC))
library(dplyr)
library(magrittr)
library(dplyr)
data.frame(formule, AIC=round(AIC,1)) %>% filter(AIC == min(AIC))
formule
PRESS<-numeric()
nap.sprem <- names(avti)
nap.sprem <- nap.sprem[! nap.sprem %in% "Taste"]
n <- length(nap.sprem)
for (i in (1:length(formule))){
mod<-lm(formule[i], data=avti)
h<-lm.influence(mod)$hat
press.ost<-residuals(mod)/(1-h)
PRESS[i]<-sum(press.ost^2)
}
rez <- data.frame(formule, PRESS)
rez[order(PRESS),]
formule
tabela<-data.frame(formule)
for (j in 1:5) {
izbor<-rep(c(TRUE, FALSE), each=n.u)
set.seed(j*10)
izbor<-sample(izbor)
avti.ucni<-avti[izbor,]
avti.test<-avti[!izbor,]
CVC<-numeric()
for (i in (1:length(formule))){
mod<-lm(formule[i], data=avti.ucni)
y.nap<-predict(mod, avti.test)
CVC[i]<-sum((avti.test$Poraba-y.nap)^2)
}
# za primerjavo v nadaljevanju izračunamo tudi RMSE
tabela<-data.frame(tabela, round(CVC, 1), round(sqrt(CVC/n.t),1))
}
n <- dim(avti)[1]
n.u <- n.t <- n/2
tabela<-data.frame(formule)
for (j in 1:5) {
izbor<-rep(c(TRUE, FALSE), each=n.u)
set.seed(j*10)
izbor<-sample(izbor)
avti.ucni<-avti[izbor,]
avti.test<-avti[!izbor,]
CVC<-numeric()
for (i in (1:length(formule))){
mod<-lm(formule[i], data=avti.ucni)
y.nap<-predict(mod, avti.test)
CVC[i]<-sum((avti.test$Poraba-y.nap)^2)
}
# za primerjavo v nadaljevanju izračunamo tudi RMSE
tabela<-data.frame(tabela, round(CVC, 1), round(sqrt(CVC/n.t),1))
}
names(tabela)<-c("formula", "CVC1", "RMSE1","CVC2", "RMSE2", "CVC3",
"RMSE3", "CVC4", "RMSE4", "CVC5", "RMSE5")
tabela[, c(1:2,4,6,8,10)]
tabela
rowwise(tabela, mean_CVC = mean(CVC1, CVC2, CVC3, CVC4, CVC5))
rowwise(tabela, mean_CVC = mean(CVC1))
mutate(tabela, mean_CVC = mean(CVC1))
tabela %>% rowwise() %>% mutate(mean_CVC = mean(c(CVC1, CVC2, CVC3, CVC4, CVC5)))
tabela %>% rowwise() %>% mutate(mean_CVC = mean(c(CVC1, CVC2, CVC3, CVC4, CVC5))) %>% filter(mean_CVC = min(mean_CVC))
tabela %>% rowwise() %>% mutate(mean_CVC = mean(c(CVC1, CVC2, CVC3, CVC4, CVC5))) %>% filter(mean_CVC == min(mean_CVC))
tabela %>% rowwise() %>% mutate(mean_CVC = mean(c(CVC1, CVC2, CVC3, CVC4, CVC5))) %>% filter(mean_CVC == min(mean_CVC))
library(dplyr)
tabela %>% rowwise() %>% mutate(mean_CVC = mean(c(CVC1, CVC2, CVC3, CVC4, CVC5))) %>% filter(mean_CVC == min(mean_CVC))
tabela %>% rowwise() %>% mutate(mean_CVC = mean(c(CVC1, CVC2, CVC3, CVC4, CVC5))) %>% arrange(mean_CVC)
#install.packages("R2BayesX")
library(R2BayesX)
bayesx(y ~ 1, family = "gaussian", method = "MCMC")
y <- x
x <- c(1.91, 1.94, 1.68, 1.75, 1.81, 1.83, 1.91, 1.95, 1.77, 1.98,
1.81, 1.75, 1.89, 1.89, 1.83, 1.89, 1.99, 1.65, 1.82, 1.65,
1.73, 1.73, 1.88, 1.81, 1.84, 1.83, 1.84, 1.72, 1.91, 1.63)
y <- x
bayesx(y ~ 1, family = "gaussian", method = "MCMC")
bayesx.norm <- bayesx(y ~ 1, family = "gaussian", method = "MCMC")
?bayesx
?bayesx.control
summary(bayesx.norm)
bayesx.mu <- attr(bayesx.norm$fixed.effects, "sample")[,1]
bayesx.sigma2 <- attr(bayesx.norm$variance, "sample")
par(mfrow = c(2, 2))
plot(bayesx.mu, type = "l", main = "Povprecje,\nveriga", xlab = "")
plot(bayesx.sigma2, type = "l", main = "Varianca,\nveriga", xlab = "")
hist(bayesx.mu, prob = T, main = "Povprecje,\nrobna aposteriorna porazdelitev")
lines(density(bayesx.mu), col = "red", lwd = 2)
hist(bayesx.sigma2, prob = T, main = "Varianca, \nrobna aposteriorna porazdelitev")
lines(density(bayesx.sigma2), col = "red", lwd = 2)
library(nimble)
code <- nimbleCode({
mu ~ dnorm(0, 0.00001) #default za drugi parameter je precision
sigma2 ~ dunif(0, 10000)
for (i in 1:n) {
y[i] ~ dnorm(mu, var = sigma2)
}
})
code
# 2. Dolocimo konstante v modelu:
constants <- list(n = length(y))
# 2. Dolocimo konstante v modelu:
constants <- list(n = length(y))
# 3. Dolocimo podatke:
data <- list(y=y)
# 4. Dolocimo zacetne vrednosti za verige parametrov:
inits <- list(mu = 0,
sigma2 = 1)
Rmodel <- nimbleModel(code, constants, data, inits) #le model zgradis
Rmodel$initializeInfo() #preverimo, da je vse ok
conf <- configureMCMC(Rmodel) #zacetek inference
conf$printSamplers() #izves, kaj so samplerji
conf$printMonitors() #izves, kaj si belezi
#default monitors so natanko:
Rmodel$getNodeNames(topOnly = T,stochOnly = T)
Rmcmc <- buildMCMC(conf)
Cmodel <- compileNimble(Rmodel)
Cmcmc <- compileNimble(Rmcmc, project = Cmodel)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
x <- c(1.91, 1.94, 1.68, 1.75, 1.81, 1.83, 1.91, 1.95, 1.77, 1.98,
1.81, 1.75, 1.89, 1.89, 1.83, 1.89, 1.99, 1.65, 1.82, 1.65,
1.73, 1.73, 1.88, 1.81, 1.84, 1.83, 1.84, 1.72, 1.91, 1.63)
y <- x
library(nimble)
code <- nimbleCode({
mu ~ dnorm(0, 0.00001) #default za drugi parameter je precision
sigma2 ~ dunif(0, 10000)
for (i in 1:n) {
y[i] ~ dnorm(mu, var = sigma2)
}
})
code
# 2. Dolocimo konstante v modelu:
constants <- list(n = length(y))
# 3. Dolocimo podatke:
data <- list(y=y)
# 4. Dolocimo zacetne vrednosti za verige parametrov:
inits <- list(mu = 0,
sigma2 = 1)
Rmodel <- nimbleModel(code, constants, data, inits) #le model zgradis
Rmodel$initializeInfo() #preverimo, da je vse ok
conf <- configureMCMC(Rmodel) #zacetek inference
conf$printSamplers() #izves, kaj so samplerji
conf$printMonitors() #izves, kaj si belezi
#default monitors so natanko:
Rmodel$getNodeNames(topOnly = T,stochOnly = T)
Rmcmc <- buildMCMC(conf)
Cmodel <- compileNimble(Rmodel)
Cmcmc <- compileNimble(Rmcmc, project = Cmodel)
samples <- runMCMC(Cmcmc, 100)   #ekspres
samples <- runMCMC(Cmcmc, 1000)  #ekspres
samples <- runMCMC(Cmcmc, 10000) #tudi zelo hitro
samples <- nimbleMCMC(code, constants, data, inits, niter=10000)
dim(samples)
head(samples)
samplesSummary(samples) #funkcija za povzetek rezultatov
summary(bayesx.norm) #primerjava z BayesX - seveda zelo podobno
mean(y) #vzorcno povprecje
var(y)  #vzorcna varianca
#BTW: y je bil generiran iz N(mean=1.85, sigma2=0.01)
#Oba prava (populacijska) parametra sta vsebovana v credible interval.
source("sportnice.R")
str(sportnice)
install.packages("nimble")
library(nimble)
version
setwd("C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Viri podatkov/domace_naloge/Naloga 1")

mutate(se = sd/sqrt(m)) # standard error
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult) %>%
mutate(n = strsplit(grp, "_")[2]) %>%
unnest(cols = c(n))
return(tb_data)
}
n_sizes <- c(32, 64, 128)
# create a results list of length = length(n_sizes)
resultsA <- vector("list", length = length(n_sizes))
resultsB <- vector("list", length = length(n_sizes))
# change names of lists for easier handling and not creating more than needed lists within
# resultsA
names(resultsA) <- paste0(as.character(n_sizes))
names(resultsB) <- paste0(as.character(n_sizes))
# defining m for number of simulation of number e.
m_reps <- 1000
set.seed(8)
# loop over n_sizes
for (n in n_sizes) {
# just for viewing the current stage
print(n)
# repeating ocenaA() function with units and n size m_reps number of times
# converting to list as to properly save to resultsA list.
resultsA[paste0(as.character(n))] <- list(replicate(m_reps, ocenaA(n)))
resultsB[paste0(as.character(n))] <- list(replicate(m_reps, ocenaB(n)))
}
summary_helper(resultsA)
summary_helper <- function(data, conf.interval=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data <- tb_data %>%
# grouping by grp
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m)) # standard error
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult)
return(tb_data)
}
summary_helper(resultsA)
tb_data <- tibble(data.frame(resultsA))
tb_data
n_sizes <- c(32, 64, 128)
# create a results list of length = length(n_sizes)
resultsA <- vector("list", length = length(n_sizes))
resultsB <- vector("list", length = length(n_sizes))
# change names of lists for easier handling and not creating more than needed lists within
# resultsA
names(resultsA) <- as.character(n_sizes)
names(resultsB) <- as.character(n_sizes)
# defining m for number of simulation of number e.
m_reps <- 1000
set.seed(8)
# loop over n_sizes
for (n in n_sizes) {
# just for viewing the current stage
print(n)
# repeating ocenaA() function with units and n size m_reps number of times
# converting to list as to properly save to resultsA list.
resultsA[as.character(n)] <- list(replicate(m_reps, ocenaA(n)))
resultsB[as.character(n)] <- list(replicate(m_reps, ocenaB(n)))
}
summary_helper <- function(data, conf.interval=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data <- tb_data %>%
# grouping by grp
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m)) # standard error
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult)
return(tb_data)
}
summary_helper(resultsA)
View(resultsA)
tb_data <- tibble(data.frame(resultsA))
tb_data
?rename_if
tb_data <- tibble(data.frame(resultsA))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data
gsub()
?gsub
summary_helper <- function(data, conf.interval=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e") %>%
mutate(n_new = gsub("X", "", n))
tb_data <- tb_data %>%
# grouping by n
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m)) # standard error
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult)
return(tb_data)
}
summary_helper(resultsA)
summary_helper <- function(data, conf.interval=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e") %>%
mutate(n_new = str_remove_all(n, "X"))
tb_data <- tb_data %>%
# grouping by n
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m)) # standard error
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult)
return(tb_data)
}
summary_helper(resultsA)
tb_data
tb_data %>% mutate(n_new = str_remove_all(n, "X"))
tb_data %>% mutate(n_new = str_remove_all(n, "X")) %>% mutate_at(n_new, as.double)
tb_data %>% mutate(n_new = str_remove_all(n, "X"))
summary_helper <- function(data, conf.interval=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data <- tb_data %>%
# grouping by n
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m),
n_temp = str_remove_all(n, "X")) # standard error
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult)
return(tb_data)
}
summary_helper(resultsA)
?rename_at
summary_helper <- function(data, conf.interval=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data <- tb_data %>%
# grouping by n
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m), # standard error
n_temp = str_remove_all(n, "X")) %>% # temp column
mutate_at(n_temp, as.double) %>%
mutate(n = n_temp) %>%
select(-n_temp)
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult)
return(tb_data)
}
summary_helper(resultsA)
?mutate_at
tb_data <- tibble(data.frame(resultsA))
tb_data
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data
tb_data <- tb_data %>%
# grouping by n
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m), # standard error
n_temp = str_remove_all(n, "X"))
tb_data
mutate_at(tb_data,n_temp, as.double)
mutate_at(tb_data,"n_temp", as.double)
summary_helper <- function(data, conf.interval=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data <- tb_data %>%
# grouping by n
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
mean = mean(simulated_e), # mean
sd = sd(simulated_e)) %>% # standard deviation
mutate(se = sd/sqrt(m), # standard error
n_temp = str_remove_all(n, "X")) %>% # temp column
mutate_at("n_temp", as.double) %>%
mutate(n = n_temp) %>%
select(-n_temp)
ci_mult <- qt(conf.interval/2 + 0.5, unique(tb_data$m)-1)
tb_data <- tb_data %>%
mutate(ci = se * ci_mult)
return(tb_data)
}
summary_helper(resultsA)
library(car)
install.packages("car")
library(car)
library(car)
data("iris")
vzorec = sample(x = 1:nrow(iris), size = 6, replace=FALSE)
vzorec1 = iris[vzorec,]
View(vzorec1)
vzorec1$ID= c(1:6)
vzorec1$SteviloListov <- recode(vzorec1$Species,"c('setosa', 'virginica') = 't'; c('versicolor') = 's' ")
View(vzorec1)
vzorec = sample(x = 1:nrow(iris), size = 6, replace=FALSE)
vzorec1 = iris[vzorec,]
vzorec1$ID= c(1:6)
vzorec1$SteviloListov <- recode(vzorec1$Species,"c('setosa', 'virginica') = 't'; c('versicolor') = 's' ")
par(mfrow = c(2, 3),cex=0.5)
sekvencaPhi = seq(0, 2*pi, 0.001)
f1 = function(sekvencafi){
r = vzorec1$Petal.Length[vzorec1$SteviloListov == q]
x1 = sekvencaR*cos(sekvencafi)*sin(3*sekvencafi)
y1 = sekvencaR*sin(sekvencafi)*sin(3*sekvencafi)
return(c(x1,y1))
}
f2 = function(sekvencafi){
r = vzorec1$Petal.Length[vzorec1$SteviloListov == q]
x2 = sekvencaR*cos(sekvencafi)*sin(3*sekvencafi)^2
y2 = sekvencaR*sin(sekvencafi)*sin(3*sekvencafi)^2
return(c(x2,y2))
}
tocke1 = sapply(sekvencafi,FUN=f1)
tocke1 = sapply(sekvencaPhi,FUN=f1)
tocke2 = sapply(sekvencaPhi,FUN=f2)
tocke1 = sapply(sekvencaPhi,FUN=f1)
(1-1/1000)^1000
1-((1-1/1000)^1000)
1/((1-1/1000)^1000)
1/((1-1/10000)^10000)
1/((1-1/100000)^100000)
1/((1-1/1000000)^1000000)
x <- c(1,1,1,1,1)
y <- c(2,2,2,2,2)
c(x,y)
?rnorm
z <- rnorm(10, mean=0, sd=1)
sapply(z, sum)
z <- rnorm(n, mean=0, sd=1)^2
z <- rnorm(10, mean=0, sd=1)^2
z
?sapply
setwd("C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Računalniška podpora statistike/Domace_naloge/naloga_6")
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo = params$printcode, results= params$printresults, warning = FALSE)
library(tidyverse)
data("iris")
iris = cbind(row_num=rownames(iris), iris)
df=tibble(iris)
# set the seed for reproducability
set.seed(8)
# an example of selecting 6 sample with function sample(), which is equivalent to below
# df_6 <- df[sample(x=1:nrow(df), size=6, replace=FALSE), ] %>%
#     # create unique identifier which is also a title
#     mutate(facet_name=paste0(Species, ", (", row_num, ")")) %>%
#     # remove unnecessary columns
#     select(-Sepal.Length, -Sepal.Width, -Petal.Width, -Species, -row_num)
# select 6 random iris flowers
df_6 <- sample_n(df, 6, replace=FALSE) %>%
# create unique identifier which is also a title
mutate(facet_name=paste0(Species, ", (", row_num, ")")) %>%
# remove unnecessary columns
select(-Sepal.Length, -Sepal.Width, -Petal.Width, -Species, -row_num)
df_6
convert_to_xy <- function(row) {
# create correct sequence of phi values.
phi <- seq(0,
ifelse(strsplit(row[2][1], " ") == "versicolor,", 2 * pi, pi),
0.001)
if (strsplit(row[2][1], " ") == "versicolor,") {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi) ^2
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi) ^2
} else {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi)
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi)
}
# output a list of lists
return(list(facet_name=rep(as.character(row[2]), length(phi)),
x=x,
y=y))
}
```
convert_to_xy <- function(row) {
# create correct sequence of phi values.
phi <- seq(0,
ifelse(strsplit(row[2][1], " ") == "versicolor,", 2 * pi, pi),
0.001)
if (strsplit(row[2][1], " ") == "versicolor,") {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi) ^2
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi) ^2
} else {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi)
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi)
}
# output a list of lists
return(list(facet_name=rep(as.character(row[2]), length(phi)),
x=x,
y=y))
}
df_6_gg <- transpose(apply(df_6, 1, convert_to_xy)) %>%
as_tibble() %>%
unnest(cols=c(facet_name, x, y))
View(df_6_gg)
fw <- ggplot(df_6_gg, aes(x=x, y=y)) +
geom_polygon(fill="#9400d3") +
# setting ylim value so (0,0) is in the middle, x is taken care of by facet_wrap
ylim(c(min(df_6_gg$y), abs(min(df_6_gg$y))))
fw + facet_wrap(vars(facet_name),
nrow=2,
scales="fixed") +
theme_minimal() +
theme(panel.grid = element_blank(), # remove the grid
panel.background = element_rect(colour = "black"), # add black panel outline
axis.ticks = element_line()) # add axis ticks
View(df_6)
apply(df_6, 1, print)
temp_f <- function(row) {
# create correct sequence of phi values.
wat <- ifelse(strsplit(row[2][1], " ") == "versicolor,", 2 * pi, pi)
# output a list of lists
return(wat)
}
apply(df_6, 1, temp_f)
temp_f <- function(row) {
# create correct sequence of phi values.
wat <- strsplit(row[2][1], " "
# output a list of lists
return(wat)
}
temp_f <- function(row) {
# create correct sequence of phi values.
wat <- strsplit(row[2][1], " ")
# output a list of lists
return(wat)
}
apply(df_6, 1, temp_f)
temp_f <- function(row) {
# create correct sequence of phi values.
wat <- row[2][1]
# output a list of lists
return(wat)
}
apply(df_6, 1, temp_f)
temp_f <- function(row) {
# create correct sequence of phi values.
wat <- strsplit(row[2][1], " ")
# output a list of lists
return(wat)
}
apply(df_6, 1, temp_f)
temp_f <- function(row) {
# create correct sequence of phi values.
wat <- strsplit(row[2][1], " ")[1]
# output a list of lists
return(wat)
}
apply(df_6, 1, temp_f)
temp_f <- function(row) {
# create correct sequence of phi values.
wat <- strsplit(row[2][1], " ")$facet_name[1]
# output a list of lists
return(wat)
}
apply(df_6, 1, temp_f)
convert_to_xy <- function(row) {
# create correct sequence of phi values.
phi <- seq(0,
ifelse(strsplit(row[2][1], " ")$facet_name[1] == "versicolor,", 2 * pi, pi),
0.001)
if (strsplit(row[2][1], " ") == "versicolor,") {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi) ^2
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi) ^2
} else {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi)
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi)
}
# output a list of lists
return(list(facet_name=rep(as.character(row[2]), length(phi)),
x=x,
y=y))
}
# correctly reshape the data to long format
df_6_gg <- transpose(apply(df_6, 1, convert_to_xy)) %>%
as_tibble() %>%
unnest(cols=c(facet_name, x, y))
fw <- ggplot(df_6_gg, aes(x=x, y=y)) +
geom_polygon(fill="#9400d3") +
# setting ylim value so (0,0) is in the middle, x is taken care of by facet_wrap
ylim(c(min(df_6_gg$y), abs(min(df_6_gg$y))))
fw + facet_wrap(vars(facet_name),
nrow=2,
scales="fixed") +
theme_minimal() +
theme(panel.grid = element_blank(), # remove the grid
panel.background = element_rect(colour = "black"), # add black panel outline
axis.ticks = element_line()) # add axis ticks
convert_to_xy <- function(row) {
# create correct sequence of phi values.
phi <- seq(0,
ifelse(strsplit(row[2][1], " ")$facet_name[1] == "versicolor,", 2 * pi, pi),
0.001)
if (strsplit(row[2][1], " ")$facet_name[1] == "versicolor,") {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi) ^2
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi) ^2
} else {
x <- as.numeric(row[1]) * cos(phi) * sin(3 * phi)
y <- as.numeric(row[1]) * sin(phi) * sin(3 * phi)
}
# output a list of lists
return(list(facet_name=rep(as.character(row[2]), length(phi)),
x=x,
y=y))
}
# correctly reshape the data to long format
df_6_gg <- transpose(apply(df_6, 1, convert_to_xy)) %>%
as_tibble() %>%
unnest(cols=c(facet_name, x, y))
fw <- ggplot(df_6_gg, aes(x=x, y=y)) +
geom_polygon(fill="#9400d3") +
# setting ylim value so (0,0) is in the middle, x is taken care of by facet_wrap
ylim(c(min(df_6_gg$y), abs(min(df_6_gg$y))))
fw + facet_wrap(vars(facet_name),
nrow=2,
scales="fixed") +
theme_minimal() +
theme(panel.grid = element_blank(), # remove the grid
panel.background = element_rect(colour = "black"), # add black panel outline
axis.ticks = element_line()) # add axis ticks
setwd("C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Računalniška podpora statistike/Seminarske_naloge/Seminarska #1")
setwd("C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Računalniška podpora statistike/Seminarske_naloge/Seminarska #1")

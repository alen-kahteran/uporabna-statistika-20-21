vpis_st <- "64200421"
substr(vpis_st, nchar(vpis_st)-2+1, nchar(vpis_st))
substr(vpis_st, nchar(vpis_st)-1, nchar(vpis_st))
dof <- as.integer(substr(vpis_st, nchar(vpis_st)-1, nchar(vpis_st)))
?quantile
moj_hi_kvadrat <- function(reps, n) {
### returns a vector of randomly distributed chi^2 values of size reps and DoF = n
### Input:
###     reps - size of chi^2 samples
###     n    - degrees of freedom
# creating empty vector of size reps for saving values
u <- rep(NA, reps)
# loop over reps
for (i in 1:reps){
# create n random normally distributed values with mean=0 and standard deviation=0
z <- rnorm(n, mean=0, sd=1)
# square and then sum
u[i] <-sum(z^2)
}
# return vector of values
return(u)
}
# size of repetitions
reps_size <- 10^5
# vpisna st.
vpis_st <- "64200421"
# degrees of freedom from vpisna st.
dof <- as.integer(substr(vpis_st, nchar(vpis_st)-1, nchar(vpis_st)))
seq(0,1,0.25)
seq(0,1,0.5)
seq(0,1,0.05)
seq(0,0.95,0.05)
quantile(moj_hi_kvadrat(reps_size, dof), probs=seq(0,0.95,0.05))
typeof(quantile(moj_hi_kvadrat(reps_size, dof), probs=seq(0,0.95,0.05)))
asdf <- quantile(moj_hi_kvadrat(reps_size, dof), probs=seq(0,0.95,0.05))
asdf["50%"]
asdf[asdf < "50%"]
?rchisq
asdf'moj_hi_kvadrat(10^5, 21)
asdf <- moj_hi_kvadrat(10^5, 21)
asdf
hist(asdf)
hist(asdf, nclass=30)
hist(asdf, nclass=300Å¾)
hist(asdf, nclass=300)
length(asdf)
length(asdf[asdf<asdf["50%"]])
asdf["50%"]
asdf
asdf_q <- quantile(moj_hi_kvadrat(reps_size, dof), probs=seq(0,0.95,0.05))
asdf_q <- quantile(asdf, probs=seq(0,0.95,0.05))
asdf_q
asdf[asdf<asdf_q["50%"]]
length(asdf[asdf<asdf_q["50%"]])
length(asdf[asdf<asdf_q["55%"]])
length(asdf[asdf<asdf_q["60%"]])
asdf_q
asdf[asdf <= 11.615374]
_dchisq
?dchisq
dchisq(seq(0,0.95,0.05),21)
pchisq(seq(0,0.95,0.05),21)
qchisq(seq(0,0.95,0.05),21)
asdf_q
asdf[asdf<=11.59131]
length(asdf[asdf<=11.59131])
empiricni_CDF <- function(vzorec, n) {
### not sure yet what it should return
### Input:
###     vzorec - vector of randomly distributed chi^2 values
###     n    - degrees of freedom
total_len <- length(vzorec)
pcts <- seq(0, 0.95, 0.05)
vectr <- rep(NA, length(pcts))
# get theoretical values of 5pct values with n degrees of freedom
qcs <- qchisq(pcts, n)
for (pct in pcts) {
vectr[which(pcts == pct)[[1]]] <- length(vzorec[vzorec <= pct])/total_len
}
# return
return(vectr)
}
empiricni_CDF(asdf)
empiricni_CDF(asdf, 21)
total_len <- length(asdf)
asdf
pcts <- seq(0, 0.95, 0.05)
vectr <- rep(NA, length(pcts))
qcs <- qchisq(pcts, 21)
pcts
qcs
empiricni_CDF <- function(vzorec, n) {
### not sure yet what it should return
### Input:
###     vzorec - vector of randomly distributed chi^2 values
###     n    - degrees of freedom
total_len <- length(vzorec)
pcts <- seq(0, 0.95, 0.05)
vectr <- rep(NA, length(pcts))
# get theoretical values of 5pct values with n degrees of freedom
qcs <- qchisq(pcts, n)
for (pct in qcs) {
vectr[which(qcs == pct)[[1]]] <- length(vzorec[vzorec <= pct])/total_len
}
# return
return(vectr)
}
empiricni_CDF(asdf, 21)
?data.frame

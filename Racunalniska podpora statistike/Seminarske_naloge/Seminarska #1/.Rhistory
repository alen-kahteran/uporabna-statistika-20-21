data$y <- (1-1/data$n)^data$n
data
data <- data.frame(n=seq(0, 100, 0.1))
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_line() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
View(data)
data <- data.frame(n=seq(0, 100, 0.1))
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_line() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
View(data)
data <- data.frame(n=seq(1, 100, 0.1))
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_line() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo = params$printcode, results= params$printresults, warning = FALSE)
# importing required library
library(tidyverse)
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar(stat="identity") +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar(stat="identity") +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red") +
ylab(expression(Pr(X\neq a)))
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar(stat="identity") +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red") +
ylab(expression(Pr(X!=a)))
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar(stat="identity") +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red") +
ylab(expression(Pr(X!=a) v n zaporednih metih))
?sample
?anz
?any
n <- 1000
set.seed(8)
temp <- replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
sapply(temp,any)
head(temp)
temp
View(temp)
replicate(1, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
temp <- replicate(1, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
View(temp)
temp <- replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
sapply(colnames(temp),function(x){mean(temp[,x])})
# Chunk 1
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo = params$printcode, results= params$printresults, warning = FALSE)
# importing required library
library(tidyverse)
# Chunk 2
data <- data.frame(n=seq(1, 100, 0.1))
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_line() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
# Chunk 3
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar(stat="identity") +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red") +
ylab(expression(Pr(X!=a)))
# Chunk 4
set.seed(8)
n <- 1000
# example of sampling
temp <- sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
# Chunk 5
any(temp)
ifelse(temp >= 1, 0, 1)
colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
ifelse(temp >= 1, 0, 1)
temp
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp <- ifelse(temp >= 1, 0, 1)
temp
mean(temp)
n(temp)
count(temp)
length(temp{temp==0})
length(temp[temp==0])
length(temp[temp==1])
length(temp)/length(temp[temp==1])
set.seed(9)
n <- 1000
# example of sampling
temp <- sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
any(temp)
any(as.logical(temp))
# example of replication
replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp2 <- ifelse(temp >= 1, 0, 1)
temp <- ifelse(temp >= 1, 0, 1)
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp <- ifelse(temp >= 1, 0, 1)
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp <- ifelse(temp >= 1, 0, 1)
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp2 <- ifelse(temp >= 1, 0, 1)
# Chunk 1
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo = params$printcode, results= params$printresults, warning = FALSE)
# importing required library
library(tidyverse)
# Chunk 2
data <- data.frame(n=seq(1, 100, 0.1))
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_line() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red")
# Chunk 3
data <- data.frame(n=1:50)
data$y <- (1-1/data$n)^data$n
ggplot(data, aes(n, y)) +
geom_bar(stat="identity") +
geom_hline(yintercept=1/exp(1), linetype="dashed", color = "red") +
ylab(expression(Pr(X!=a)))
# Chunk 4
set.seed(9)
n <- 1000
# example of sampling
temp <- sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
# Chunk 5
any(as.logical(temp))
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
temp2 <- ifelse(temp >= 1, 0, 1)
length(temp2)/length(temp2[temp2==1])
1/mean(temp2)
# Chunk 1
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo = params$printcode, results= params$printresults, warning = FALSE)
# importing required library
library(tidyverse)
library(knitr)
library(kableExtra)
# Chunk 2
data <- data.frame(n=seq(1, 100, 0.1))
data$y <- (1 - 1/data$n) ^ data$n
ggplot(data, aes(n, y)) +
geom_line() +
geom_hline(yintercept=1/exp(1), linetype="dashed", color="red")
# Chunk 3
data <- data.frame(n=1:50)
data$y <- (1 - 1/data$n) ^ data$n
ggplot(data, aes(n, y)) +
geom_bar(stat="identity") +
geom_hline(yintercept=1/exp(1),
linetype="dashed",
color="red") +
ylab(expression(Pr(X != a)))
# Chunk 4
set.seed(8)
n <- 1000
# example of sampling
temp <- sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
# Chunk 5
any(as.logical(temp))
# Chunk 7
temp <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
# Chunk 8
temp2 <- ifelse(temp >= 1, 0, 1)
# Chunk 9
length(temp2) / length(temp2[temp2 == 1])
# Chunk 10
1/mean(temp2)
# Chunk 11
# defining ocenaA() function
ocenaA <- function(n){
### returns an approximate of number e - method a
### Input:
###     n - integer, number of samples
# sample units with replacement (a simulation of drawing numbers from units)
# from a vector of 1 and 0, where probability is 1/n for 1 and 1-1/n for 0.
# replicate the drawing process n number of times for simulation purposes.
# and sum column wise as it returns a matrix
sampled_units <- colSums(replicate(n, sample(c(1, 0),
size=n,
replace=TRUE,
prob=c((1 / n), (1 - (1 / n)))
)
)
)
# if sum of values was equal or larger then 1 then we set to 0 as it does contain
# number 1, otherwise we set to 1 as it does not contain number 1.
does_not_contain_1 <- ifelse(sampled_units >= 1, 0, 1)
# returning the inverse of mean of does_not_contain_1 which is an approximate of e.
return(1/mean(does_not_contain_1))
}
# Chunk 12
ggplot(NULL, aes(x=c(0, 8))) +
stat_function(fun=dexp,
geom="area",
fill="steelblue",
alpha=0.3,
args=list(rate=0.5)) +
stat_function(fun=dexp,
geom="area",
fill="steelblue",
xlim=c(2, 8),
args=list(rate=0.5)) +
geom_vline(xintercept=2,
linetype="dashed",
color="red")
# Chunk 13
integrate(dexp, 2, Inf, rate=0.5)
# Chunk 14
1/integrate(dexp, 2, Inf, rate=0.5)$value
# Chunk 17
# example of replication
n <- 1000
temp <- replicate(n, sum(rnorm(2, mean=0, sd=1)^2))
# Chunk 18
# example of cheking
temp2 <- ifelse(temp >= 2, 1, 0)
# Chunk 19
# example of generating e
1/mean(temp2)
# Chunk 20
ocenaB <- function(n){
### returns an approximate of number e - method b
### Input:
###     n - integer, number of samples
# generate 2 numbers (x_1 and x_2) with mean=0 and sd=1.
# square them and them sum them.
# replicate n number of times
sampled_units <- replicate(n, sum(rnorm(2, mean=0, sd=1)^2))
# check if it's larger or equal to 2, set value to 1, otherwise set to 0
larger_equal_2 <- ifelse(sampled_units >= 2, 1, 0)
# returning the inverse of mean of larger_equal_2 as this is an approximate of e.
return(1/mean(larger_equal_2))
}
# Chunk 21
# test n
n <- 1000
# this is a test for ocenaA()
ocenaA(n)
# this is a test for ocenaB()
ocenaB(n)
# Chunk 22
# defining different n
n_sizes <- c(32, 128, 512, 2048)
# n_sizes <- c(32, 128, 512, 2048, 8192)
# Chunk 23
# create a results list of length = length(n_sizes)
resultsA <- vector("list", length = length(n_sizes))
resultsB <- vector("list", length = length(n_sizes))
# Chunk 24
# change names of lists for easier handling and not creating more than needed lists within
# resultsA and resultsB
names(resultsA) <- as.character(n_sizes)
names(resultsB) <- as.character(n_sizes)
# Chunk 25
# defining m for number of simulation of number e.
m_reps <- 1000
# Chunk 26
# setting seed for reproducibility.
set.seed(8)
# Chunk 27
# loop over n_sizes
for (n in n_sizes) {
# just for viewing the current stage
# print(n)
# repeating ocenaA() function with units and n size m_reps number of times
# converting to list as to properly save to resultsA list.
resultsA[as.character(n)] <- list(replicate(m_reps, ocenaA(n)))
resultsB[as.character(n)] <- list(replicate(m_reps, ocenaB(n)))
}
# Chunk 28
get_modus <- function(vec) {
uniqvec <- unique(vec)
uniqvec[which.max(tabulate(match(vec, uniqvec)))]
}
summary_helper <- function(data, conf.level=0.95) {
### helper function that returns, count, SD, SE and CI at specified conf.interval
### input:
###     data - a named list of lists of simulated number e values.
###     conf.level - confidence level as 1 - \alpha. Default 0.95 (\alpha = 0.05)
# creating a tibble from data.frame (as data.frame correctly changes a list of lists)
tb_data <- tibble(data.frame(data))
# changing to long data format to work with other functions
tb_data <- pivot_longer(tb_data,
cols=colnames(tb_data),
names_to="n",
values_to="simulated_e")
tb_data <- tb_data %>%
# removing infinite values to not return inf when creating a summary, therefore
filter(!is.infinite(simulated_e)) %>%
# grouping by n
group_by(n) %>%
# creating new summary columns
summarise(m = n(), # count
Min.       = min(simulated_e), # minimum
`1st Qu.`  = quantile(simulated_e, probs=c(0.25)), # lower quartile
Median     = median(simulated_e), # median
Modus      = get_modus(simulated_e), # modus
Mean       = mean(simulated_e), # mean
`1rd Qu.`  = quantile(simulated_e, probs=c(0.75)), # upper quartile
Max.       = max(simulated_e), # maximum
`St. dev.` = sd(simulated_e),  # standard deviation
`St. err.` = sd(simulated_e)/sqrt(m)) %>% # standard error
ungroup()
tb_data$n_temp <- str_remove_all(tb_data$n, "X") # temp column
# change n_temp to double type
tb_data <- tb_data %>%
mutate_at("n_temp", as.double) %>%
# copy to n column
mutate(n = n_temp) %>%
# remove n_temp
select(-n_temp)
# calculate CI multiplier
tb_data <- tb_data %>% mutate(conf_int = conf.level/2 + 0.5,
df = m - 1) %>%
mutate(ci_mult = qt(conf_int, df)) %>%
select(-conf_int, -df)
# calculate CI
tb_data <- tb_data %>%
mutate(ci = `St. err.` * ci_mult) %>%
mutate(Lower=Mean-ci,
Upper=Mean+ci) %>%
select(-ci_mult, -ci) %>%
arrange(n)
# return the summary tibble
return(tb_data)
}
# Chunk 29
# summary_helper() output
summA <- summary_helper(resultsA)
summA
summB <- summary_helper(resultsB)
summB
# kable output
kable(summA, digits=4, caption = "ocenaA()") %>% kable_styling(full_width = FALSE)
kable(summB, digits=4, caption = "ocenaB()") %>% kable_styling(full_width = FALSE)
summA$grp <- "A"
summB$grp <- "B"
plot_data <- rbind(summA, summB)
ggplot(plot_data, aes(x=n, y=Mean, col=grp)) +
geom_errorbar(aes(ymin=Lower, ymax=Upper), width=.1, position=position_dodge(0.1)) +
geom_point(position=position_dodge(0.1)) +
scale_x_continuous(trans = 'log2') +
geom_hline(yintercept=exp(1), linetype="dashed", color="red") +
labs(y="Ocena št. e", color="Način ocene", title="Prikaz povprečij z intervalom zaupanja")
ggplot(plot_data, aes(x=n, y=Mean, col=grp)) +
geom_errorbar(aes(ymin=Mean-`St. dev.`, ymax=Mean*`St. dev.`), width=.1, position=position_dodge(0.1)) +
geom_point(position=position_dodge(0.1)) +
scale_x_continuous(trans = 'log2') +
geom_hline(yintercept=exp(1), linetype="dashed", color="red") +
labs(y="Ocena št. e", color="Način ocene", title="Prikaz povprečij s standardno deviacijo")
plot_data
summA$grp <- "A"
summB$grp <- "B"
plot_data <- rbind(summA, summB)
ggplot(plot_data, aes(x=n, y=Mean, col=grp)) +
geom_errorbar(aes(ymin=Lower, ymax=Upper), width=.1, position=position_dodge(0.1)) +
geom_point(position=position_dodge(0.1)) +
scale_x_continuous(trans = 'log2') +
geom_hline(yintercept=exp(1), linetype="dashed", color="red") +
labs(y="Ocena št. e", color="Način ocene", title="Prikaz povprečij z intervalom zaupanja")
ggplot(plot_data, aes(x=n, y=Mean, col=grp)) +
geom_errorbar(aes(ymin=Mean-`St. dev.`, ymax=Mean-`St. dev.`), width=.1, position=position_dodge(0.1)) +
geom_point(position=position_dodge(0.1)) +
scale_x_continuous(trans = 'log2') +
geom_hline(yintercept=exp(1), linetype="dashed", color="red") +
labs(y="Ocena št. e", color="Način ocene", title="Prikaz povprečij s standardno deviacijo")
plot_data
summA$grp <- "A"
summB$grp <- "B"
plot_data <- rbind(summA, summB)
ggplot(plot_data, aes(x=n, y=Mean, col=grp)) +
geom_errorbar(aes(ymin=Lower, ymax=Upper), width=.1, position=position_dodge(0.1)) +
geom_point(position=position_dodge(0.1)) +
scale_x_continuous(trans = 'log2') +
geom_hline(yintercept=exp(1), linetype="dashed", color="red") +
labs(y="Ocena št. e", color="Način ocene", title="Prikaz povprečij z intervalom zaupanja")
ggplot(plot_data, aes(x=n, y=Mean, col=grp)) +
geom_errorbar(aes(ymin=Mean-`St. dev.`, ymax=Mean+`St. dev.`), width=.1, position=position_dodge(0.1)) +
geom_point(position=position_dodge(0.1)) +
scale_x_continuous(trans = 'log2') +
geom_hline(yintercept=exp(1), linetype="dashed", color="red") +
labs(y="Ocena št. e", color="Način ocene", title="Prikaz povprečij s standardno deviacijo")

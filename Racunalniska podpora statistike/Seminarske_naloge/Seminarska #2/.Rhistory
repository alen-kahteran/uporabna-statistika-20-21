StanjePrometa,
StanjeVozisca,
VrstaVozisca,
Starost,
Spol,
VozniskiStazVMesecih,
VrednostAlkotesta)
# removing rows with NA values if there are any
data_500 <- data_500[rowSums(is.na(data_500)) == 0, ]
write.table(data_500,
"data.txt",
sep="\t",
dec=",",
row.names=FALSE,
col.names=TRUE)
desc_table <- cbind(c("ZaporednaStevilkaPN", #1
"KlasifikacijaNesrece", #2
"UpravnaEnotaStoritve", #3
"DatumPN", #4
"UraPN", #5
"VNaselju", #6
"Lokacija", #7
"VrstaCesteNaselja", #8
"SifraCesteNaselja", #9
"TekstCesteNaselja", #10
"SifraOdsekaUlice", #11
"TekstOdsekaUlice", #12
"StacionazaDogodka", #13
"OpisKraja", #14
"VzrokNesrece", #15
"TipNesrece", #16
"VremenskeOkoliscine", #17
"StanjePrometa", #18
"StanjeVozisca", #19
"VrstaVozisca", #20
"GeoKoordinataX", #21
"GeoKoordinataY", #22
"ZaporednaStevilkaOsebeVPN", #23
"Povzrocitelj", #24
"Starost", #25
"Spol", #26
"UEStalnegaPrebivalisca", #27
"Drzavljanstvo", #28
"PoskodbaUdelezenca", #29
"VrstaUdelezenca", #30
"UporabaVarnostnegaPasu", #31
"VozniskiStazVLetih", #32
"VozniskiStazVMesecih", #33
"VrednostAlkotesta", #34
"VrednostStrokovnegaPregleda"), #35
c("številka za štetje in ločevanje posamezne prometne nesreče",
"klasifikacija nesreče glede na posledice (Izračuna se avtomatično glede na najhujšo posledico pri udeležencih v prometni nesreči)",
"upravna enota, na območju katere se je zgodila prometna nesreča",
"datum nesreče (format: dd.mm.llll)",
"ura nesreče (format: hh)",
"indikator ali se je nesreča zgodila v naselju (D) ali izven (N)",
"lokacija nesreče",
"vrsta ceste ali naselja na kateri je prišlo do nesreče",
"oznaka ceste ali šifra naselja kjer je prišlo do nesreče",
"tekst ceste ali naselja, kjer je prišlo do nesreče",
"oznaka odseka ceste ali šifra ulice, kjer je prišlo do nesreče",
"tekst odseka ali ulice, kjer je prišlo do nesreče",
"točna stacionaža ali hišna številka, kjer je prišlo do nesreče",
"opis prizorišča nesreče",
"glavni vzrok nesreče",
"tip nesreče",
"vremenske okoliščine v času nesreče",
"stanje prometa v času nesreče",
"stanje vozišča v času nesreče",
"stanje površine vozišča v času nesreče",
"Geo Koordinata X (Gauß-Krüger-jev koordinatni sistem)",
"Geo Koordinata Y (Gauß-Krüger-jev koordinatni sistem)",
"številka za štetje in ločevanje oseb, udeleženih v prometnih nesrečah",
"kot kaj nastopa oseba v prometni nesreči",
"starost osebe (LL)",
"spol",
"upravna enota stalnega prebivališča",
"državljanstvo osebe",
"poškodba osebe",
"vrsta udeleženca v prometu",
"ali je oseba uporabljala varnostni pas ali čelado (polje se interpretira v odvisnosti od vrste udeleženca) (Da/Ne)",
"vozniški staž osebe za kategorijo, ki jo potrebuje glede na vrsto udeleženca v prometu (LL)",
"vozniški staž osebe za kategorijo, ki jo potrebuje glede na vrsto udeleženca v prometu (MM)",
"vrednost alkotesta za osebo, če je bil opravljen (n.nn)",
"vrednost strokovnega pregleda za osebo, če je bil odrejen in so rezultati že znani (n.nn)"),
c("da", #1
"ne", #2
"ne", #3
"da", #4
"ne", #5
"da", #6
"ne", #7
"ne", #8
"ne", #9
"ne", #10
"ne", #11
"ne", #12
"ne", #13
"ne", #14
"da", #15
"ne", #16
"da", #17
"da", #18
"da", #19
"da", #20
"ne", #21
"ne", #22
"ne", #23
"da", #24
"da", #25
"da", #26
"ne", #27
"da", #28
"ne", #29
"da", #30
"ne", #31
"ne", #32
"da", #33
"da", #34
"ne"))#35
desc_table <- data.frame(desc_table)
colnames(desc_table) <- c("Ime spremenljivke", "Opis spremenljivke (in morebiten format)", "Uporaba")
desc_table <- as_tibble(desc_table)
# defining helper functions
t_test_filter <- function(data, column, k=30){
# a function which returns data filtered by column where each groupćs size was less
# than k. This is due to two sample t-test requiring the averages of data to be
# normally distributed, which holds true (if k is large enough)
# due to Central Limit Theorem.
# input:
#     data - tibble or data.frame of entire data
#     column - string of column name
#     n - the limit below which we remove the group
# so we correctly evaluate column name.
column = enquo(arg = column)
temp <- data %>%
# count by gender and then column
count(Spol, !!column) %>%
# pivot to wide
pivot_wider(names_from = Spol,
values_from = n) %>%
# check if male/female group is larger than k and if both are.
mutate(.,
M_larger = if_else(.$'MOŠKI' >= k, 1,0,0),
F_larger = if_else(.$'ŽENSKI' >= k, 1,0,0)) %>%
mutate(both = if_else(M_larger == 1 & F_larger == 1, 1, 0, 0)) %>%
select(-'MOŠKI',
-'ŽENSKI',
-M_larger,
-F_larger)
# left join to data, filter by both groups
return(left_join(data, temp) %>% filter(both == 1) %>% select(-both))
}
p_return <- function(p, conf.level=0.05) {
# a function which returns a string of "zavrnemo" or "ne zavrnemo" depending on p
# value given at conf.level.
# input:
#     p - numeric value of p value
#     conf.level - numeric value of conf.level, default= 0.05
if (p < conf.level) {
return("zavrnemo")
} else{
return("ne zavrnemo")
}
}
data_500 <- as_tibble(read.table("data.txt",
header=TRUE,
sep="\t",
encoding="WIN-1250",
dec=","))
# correctly converting to datetime (POSIXct)
data_500$DatumPN <- parse_date_time(data_500$DatumPN, c("Ymd HMS"))
names(data_500)
ggplot(data_500, aes(y=Starost, x=Spol)) +
geom_boxplot() +
labs(x="Spol", y="Starost")
ggplot(data_500, aes(Starost, ..count..)) +
geom_histogram(bins=30) +
facet_grid(rows=vars(Spol))
# labs(x="Spol", y="Starost")
names(data_500)
data_500$Starost*12
data_500$Starost*12 - data_500$VozniskiStazVMesecih
(data_500$Starost*12 - data_500$VozniskiStazVMesecih)/12
data_500 %>% mutate(starost_ob_izpitu = (data_500$Starost*12 - data_500$VozniskiStazVMesecih)/12)
data_500 <- data_500 %>% mutate(starost_ob_izpitu = (data_500$Starost*12 - data_500$VozniskiStazVMesecih)/12)
ggplot(data_500, aes(y=starost_ob_izpitu , x=Spol)) +
geom_boxplot() +
labs(x="Spol", y="Starost")
ggplot(data_500, aes(starost_ob_izpitu,..count..)) +
geom_histogram() +
facet_grid(rows = vars(Spol))
names(data_500)
table(data_500$VNaselju, data_500$Spol)
tmp <- table(data_500$VNaselju, data_500$Spol)
colbind(tmp, rowsums(tmp))
cbind(tmp, rowsums(tmp))
cbind(tmp, rowSums(tmp))
tmp <- table(data_500$VNaselju, data_500$Spol)
tmp <- cbind(tmp, rowSums(tmp))
tmp <- rbind(tmp, colSums(tmp))
tmp
names(tmp)
colnames(tmp)
rownames(tmp)
unique(data_500$Spol)
tmp <- table(data_500$VNaselju, data_500$Spol)
tmp <- cbind(tmp, rowSums(tmp))
tmp <- rbind(tmp, colSums(tmp))
colnames(tmp) <- c(unique(data_500$Spol), "VSOTA")
rownames(tmp) <- c(unique(data_500$VNaselju), "VSOTA")
tmp
data.frame(tmp)
tibble(data.frame(tmp))
typeof(is.character())
typeof(is.character
))
typeof(is.character)
ggplot(data_500, aes(VNaselju, ..count..)) +
geom_bar() +
labs(x="Starost", y="Frekvenca")
ggplot(data_500, aes(VremenskeOkoliscine, ..count..)) +
geom_bar() +
labs(x="Vremenske okoliščine", y="Frekvenca")
ggplot(data_500, aes(StanjePrometa, ..count..)) +
geom_bar() +
labs(x="Stanje prometa", y="Frekvenca")
ggplot(data_500, aes(StanjeVozisca, ..count..)) +
geom_bar() +
labs(x="Stanje vozišča", y="Frekvenca")
ggplot(data_500, aes(VNaselju, ..count.., col=Spol)) +
geom_bar(position = "stack") +
labs(x="V naselju", y="Frekvenca")
ggplot(data_500, aes(VNaselju, ..count.., fill=Spol)) +
geom_bar(position = "stack") +
labs(x="V naselju", y="Frekvenca")
ggplot(data_500, aes(VNaselju, ..count.., fill=Spol)) +
geom_bar(position = "fill") +
labs(x="V naselju", y="Frekvenca")
ggplot(data_500, aes(VNaselju, ..count.., fill=Spol)) +
geom_bar(position = "fill") +
labs(x="V naselju", y="Relativna frekvenca") +
scale_fill_manual(values = c("grey", "white"))
ggplot(data_500, aes(VNaselju, ..count.., fill=Spol)) +
geom_bar(position = "fill") +
labs(x="V naselju", y="Relativna frekvenca") +
scale_fill_manual(values = c("blue", "red"))
ggplot(data_500, aes(VNaselju, ..count.., fill=Spol)) +
geom_bar(position = "fill") +
labs(x="V naselju", y="Relativna frekvenca") +
scale_fill_manual(values = c("#00BFC4", "#F8766D"))
ggplot(data_500, aes(StanjePrometa, ..count.., fill=Spol)) +
geom_bar(position = "fill") +
labs(x="V naselju", y="Relativna frekvenca") +
scale_fill_manual(values = c("#00BFC4", "#F8766D"))
install.packages("installr"
)
library(installr)
updateR()
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo = params$printcode, results= params$printresults, warning = FALSE, message = FALSE)
# importing required library
library(tidyverse)
library(knitr)
library(kableExtra)
library(lubridate)
desc_table <- cbind(c("ZaporednaStevilkaPN", #1
"KlasifikacijaNesrece", #2
"UpravnaEnotaStoritve", #3
"DatumPN", #4
"UraPN", #5
"VNaselju", #6
"Lokacija", #7
"VrstaCesteNaselja", #8
"SifraCesteNaselja", #9
"TekstCesteNaselja", #10
"SifraOdsekaUlice", #11
"TekstOdsekaUlice", #12
"StacionazaDogodka", #13
"OpisKraja", #14
"VzrokNesrece", #15
"TipNesrece", #16
"VremenskeOkoliscine", #17
"StanjePrometa", #18
"StanjeVozisca", #19
"VrstaVozisca", #20
"GeoKoordinataX", #21
"GeoKoordinataY", #22
"ZaporednaStevilkaOsebeVPN", #23
"Povzrocitelj", #24
"Starost", #25
"Spol", #26
"UEStalnegaPrebivalisca", #27
"Drzavljanstvo", #28
"PoskodbaUdelezenca", #29
"VrstaUdelezenca", #30
"UporabaVarnostnegaPasu", #31
"VozniskiStazVLetih", #32
"VozniskiStazVMesecih", #33
"VrednostAlkotesta", #34
"VrednostStrokovnegaPregleda"), #35
c("številka za štetje in ločevanje posamezne prometne nesreče",
"klasifikacija nesreče glede na posledice (Izračuna se avtomatično glede na najhujšo posledico pri udeležencih v prometni nesreči)",
"upravna enota, na območju katere se je zgodila prometna nesreča",
"datum nesreče (format: dd.mm.llll)",
"ura nesreče (format: hh)",
"indikator ali se je nesreča zgodila v naselju (D) ali izven (N)",
"lokacija nesreče",
"vrsta ceste ali naselja na kateri je prišlo do nesreče",
"oznaka ceste ali šifra naselja kjer je prišlo do nesreče",
"tekst ceste ali naselja, kjer je prišlo do nesreče",
"oznaka odseka ceste ali šifra ulice, kjer je prišlo do nesreče",
"tekst odseka ali ulice, kjer je prišlo do nesreče",
"točna stacionaža ali hišna številka, kjer je prišlo do nesreče",
"opis prizorišča nesreče",
"glavni vzrok nesreče",
"tip nesreče",
"vremenske okoliščine v času nesreče",
"stanje prometa v času nesreče",
"stanje vozišča v času nesreče",
"stanje površine vozišča v času nesreče",
"Geo Koordinata X (Gauß-Krüger-jev koordinatni sistem)",
"Geo Koordinata Y (Gauß-Krüger-jev koordinatni sistem)",
"številka za štetje in ločevanje oseb, udeleženih v prometnih nesrečah",
"kot kaj nastopa oseba v prometni nesreči",
"starost osebe (LL)",
"spol",
"upravna enota stalnega prebivališča",
"državljanstvo osebe",
"poškodba osebe",
"vrsta udeleženca v prometu",
"ali je oseba uporabljala varnostni pas ali čelado (polje se interpretira v odvisnosti od vrste udeleženca) (Da/Ne)",
"vozniški staž osebe za kategorijo, ki jo potrebuje glede na vrsto udeleženca v prometu (LL)",
"vozniški staž osebe za kategorijo, ki jo potrebuje glede na vrsto udeleženca v prometu (MM)",
"vrednost alkotesta za osebo, če je bil opravljen (n.nn)",
"vrednost strokovnega pregleda za osebo, če je bil odrejen in so rezultati že znani (n.nn)"),
c("da", #1
"ne", #2
"ne", #3
"da", #4
"ne", #5
"da", #6
"ne", #7
"ne", #8
"ne", #9
"ne", #10
"ne", #11
"ne", #12
"ne", #13
"ne", #14
"da", #15
"ne", #16
"da", #17
"da", #18
"da", #19
"da", #20
"ne", #21
"ne", #22
"ne", #23
"da", #24
"da", #25
"da", #26
"ne", #27
"da", #28
"ne", #29
"da", #30
"ne", #31
"ne", #32
"da", #33
"da", #34
"ne"))#35
desc_table <- data.frame(desc_table)
colnames(desc_table) <- c("Ime spremenljivke", "Opis spremenljivke (in morebiten format)", "Uporaba")
desc_table <- as_tibble(desc_table)
# defining helper functions
t_test_filter <- function(data, column, k=30){
# a function which returns data filtered by column where each groupćs size was less
# than k. This is due to two sample t-test requiring the averages of data to be
# normally distributed, which holds true (if k is large enough)
# due to Central Limit Theorem.
# input:
#     data - tibble or data.frame of entire data
#     column - string of column name
#     n - the limit below which we remove the group
# so we correctly evaluate column name.
column = enquo(arg = column)
temp <- data %>%
# count by gender and then column
count(Spol, !!column) %>%
# pivot to wide
pivot_wider(names_from = Spol,
values_from = n) %>%
# check if male/female group is larger than k and if both are.
mutate(.,
M_larger = if_else(.$'MOŠKI' >= k, 1,0,0),
F_larger = if_else(.$'ŽENSKI' >= k, 1,0,0)) %>%
mutate(both = if_else(M_larger == 1 & F_larger == 1, 1, 0, 0)) %>%
select(-'MOŠKI',
-'ŽENSKI',
-M_larger,
-F_larger)
# left join to data, filter by both groups
return(left_join(data, temp) %>% filter(both == 1) %>% select(-both))
}
p_return <- function(p, conf.level=0.05) {
# a function which returns a string of "zavrnemo" or "ne zavrnemo" depending on p
# value given at conf.level.
# input:
#     p - numeric value of p value
#     conf.level - numeric value of conf.level, default= 0.05
if (p < conf.level) {
return("zavrnemo")
} else{
return("ne zavrnemo")
}
}
data_500 <- as_tibble(read.table("data.txt",
header=TRUE,
sep="\t",
encoding="WIN-1250",
dec=","))
# correctly converting to datetime (POSIXct)
data_500$DatumPN <- parse_date_time(data_500$DatumPN, c("Ymd HMS"))
ggplot(data_500, aes(y=starost)) +
geom_boxplot() +
labs(x="V naselju", y="Relativna frekvenca") +
facet_grid(cols=vars(Spol),
rows=vars(VNaselju))
ggplot(data_500, aes(y=Starost)) +
geom_boxplot() +
labs(x="V naselju", y="Relativna frekvenca") +
facet_grid(cols=vars(Spol),
rows=vars(VNaselju))
ggplot(data_500, aes(y=Starost)) +
geom_histogram() +
labs(x="V naselju", y="Relativna frekvenca") +
facet_grid(cols=vars(Spol),
rows=vars(VNaselju))
ggplot(data_500, aes(x=Starost)) +
geom_histogram() +
labs(x="V naselju", y="Relativna frekvenca") +
facet_grid(cols=vars(Spol),
rows=vars(VNaselju))
sample(1:n,size=n,replace=TRUE)
sample(1:100,size=100,replace=TRUE)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
mean(sample(1:100,size=100,replace=TRUE)!=1)
ggplot(data_500, aes(y=Starost)) +
geom_boxplot() +
labs(x=NULL, y="Starost") +
facet_grid(cols=vars(Spol),
rows=vars(VNaselju)) +
theme(axis.ticks.x = NULL)
ggplot(data_500, aes(y=Starost)) +
geom_boxplot() +
labs(x=NULL, y="Starost") +
facet_grid(cols=vars(Spol),
rows=vars(VNaselju)) +
theme(axis.ticks.x = element_blank())
ggplot(data_500, aes(y=Starost)) +
geom_boxplot() +
labs(x=NULL, y="Starost") +
facet_grid(cols=vars(Spol),
rows=vars(VNaselju)) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank())
housetasks
chisq.test(table(data_500$VNaselju, data_500$Spol))
chisq.test(table(data_500$VNaselju, data_500$Spol)).expected
chisq.test(table(data_500$VNaselju, data_500$Spol))$expected
table(data_500$VremenskeOkoliscine)
max(table(data_500$VremenskeOkoliscine))
table(data_500$VremenskeOkoliscine)
asdf <- table(data_500$VremenskeOkoliscine)
asdf$max
count(data_500$VremenskeOkoliscine)
?table
table(data_500$VremenskeOkoliscine, deparse.level = 2)
table(data_500$VremenskeOkoliscine, deparse.level = 0)
table(data_500$VremenskeOkoliscine, deparse.level = 1)
table(data_500$VremenskeOkoliscine, deparse.level = 2)
asdf <- table(data_500$VremenskeOkoliscine, deparse.level = 2)
asdf <- n(data_500$VremenskeOkoliscine, deparse.level = 2)
asdf <- n(data_500$VremenskeOkoliscine)
?n
data_500 %>% n()
data_500$VremenskeOkoliscine %>% n()
data_500 %>% group_by(VremenskeOkoliscine ) %>% n()
data_500 %>% group_by(VremenskeOkoliscine ) %>% count()
data_500 %>% count(VremenskeOkoliscine)
count(data_500, VremenskeOkoliscine)
count(data_500, VremenskeOkoliscine)$VremenskeOkoliscine[count(data_500, VremenskeOkoliscine)$n == max(count(data_500, VremenskeOkoliscine)$n)]
table(data_500$VremenskeOkoliscine)
table(data_500$VremenskeOkoliscine)[[1]]
table(data_500$VremenskeOkoliscine)[1]
table(data_500$VremenskeOkoliscine)[1][2]
table(data_500$VremenskeOkoliscine)[1][1]
table(data_500$VremenskeOkoliscine)[1,]
table(data_500$VremenskeOkoliscine)[1,1]
names(table(data_500$VremenskeOkoliscine))
?which
which(names(table(data_500$VremenskeOkoliscine)), table(data_500$VremenskeOkoliscine) == max(table(data_500$VremenskeOkoliscine)))

mean(c(1.91, 1.94, 1.68, 1.75, 1.81, 1.83, 1.91, 1.95, 1.77, 1.98, 1.81, 1.75, 1.89, 1.89,
1.83, 1.89, 1.99, 1.65, 1.82, 1.65, 1.73, 1.73, 1.88, 1.81, 1.84, 1.83, 1.84, 1.72,
1.91, 1.63))
var(c(1.91, 1.94, 1.68, 1.75, 1.81, 1.83, 1.91, 1.95, 1.77, 1.98, 1.81, 1.75, 1.89, 1.89,
1.83, 1.89, 1.99, 1.65, 1.82, 1.65, 1.73, 1.73, 1.88, 1.81, 1.84, 1.83, 1.84, 1.72,
1.91, 1.63))
# set this option in the first code chunk in the document
knitr::opts_chunk$set(echo=params$printcode, results=params$printresults, warning=FALSE, message=FALSE)
# importing required library
library(tidyverse)
# samples for likelihood
x <- c(1.91, 1.94, 1.68, 1.75, 1.81, 1.83, 1.91, 1.95, 1.77, 1.98, 1.81, 1.75, 1.89, 1.89,
1.83, 1.89, 1.99, 1.65, 1.82, 1.65, 1.73, 1.73, 1.88, 1.81, 1.84, 1.83, 1.84, 1.72,
1.91, 1.63)
# sigma for likelihood
sig_like <- 0.1
# sigma for prior
sig_prior <- 0.2
# mu_0 for prior
mu_0 <- 1.78
verjetje <- function(theta, x, log_=FALSE) {
if (log_) {
return(sum(log((1/(sqrt(2*pi)*sig_like))*exp(-(x-theta)^2/(2*sig_like^2)))))
} else {
return(prod((1/(sqrt(2*pi)*sig_like))*exp(-(x-theta)^2/(2*sig_like^2))))
}
}
_dnorm
?dnorm
dnorm(x, theta, sig_like)
dnorm(x, 1.75, sig_like)
verjetje(1.75,x)
prod(dnorm(x, 1.75, sig_like))
sum(dnorm(x, 1.75, sig_like, log=TRUE))
verjetje(1.75,x, log_=TRUE)
setwd("C:/Users/LaZyM/Desktop/Uporabna statistika prvi letnik/Bayesova statistika/domace_naloge/naloga_1")
# defining metropolis-hastings algorithm in a function
metro_hasti = function(n_iter, theta_init, sig_prop, log_=FALSE){
# vector for saving
posterior = rep(0, n_iter)
# set first value to theta_init
posterior[1] = theta_init
# loop n_iter - 1 times
for(i in 2:n_iter){
# change current_theta
current_theta = posterior[i - 1]
# get new_theta (where proposal distribution is normal)
new_theta = current_theta + rnorm(1, 0, sig_prop)
# calculate prior and likelihood for new theta
prior_new <- apriorna(new_theta, log=log_)
like_new <- verjetje(new_theta, x, log=log_)
# calculate prior and likelihood for current theta
prior_curr <- apriorna(current_theta, log=log_)
like_curr <- verjetje(current_theta, x, log=log_)
# calculate alpha
if (log_) {
A <- exp((prior_new + like_new) - (prior_curr + like_curr))
} else {
A <- (prior_new * like_new) / (prior_curr * like_curr)
}
# accept/reject new_theta based on alpha
if(runif(1) < A){
posterior[i] = new_theta # "accept" move with probability min(1, A)
} else {
posterior[i] = current_theta # otherwise "reject" move.
}
}
# return a sample of posterior distribution
return(posterior)
}
?rnorm
chain <- metro_hasti(iter_num, 1.7, 0.1, log_=FALSE)
# number of iterations for metropolis hastings
iter_num <- 40000
chain <- metro_hasti(iter_num, 1.7, 0.1, log_=FALSE)
# defining likelihood function
verjetje <- function(theta, x, log_=FALSE) {
if (log_) {
# just here for testing
# return(sum(log((1/(sqrt(2*pi)*sig_like))*exp(-(x-theta)^2/(2*sig_like^2)))))
return(sum(dnorm(x, theta, sig_like, log=log_)))
} else {
# just here for testing
# return(prod((1/(sqrt(2*pi)*sig_like))*exp(-(x-theta)^2/(2*sig_like^2))))
return(prod(dnorm(x, theta, sig_like)))
}
}
# is this needed???
# we can't even multiply by this as we only get a single value out
konst <- function(theta, x){
1 / (0.001 * sum(verjetje(theta, x)))
}
# defining prior function
apriorna <- function(theta, log_=FALSE){
return(dnorm(theta, mu_0, sig_prior, log=log_))
}
chain <- metro_hasti(iter_num, 1.7, 0.1, log_=FALSE)
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line()
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() + geom_point()
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() + geom_point()
chain <- metro_hasti(iter_num, 1.7, 0.1, log_=FALSE)
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() +
labs(x="Indeks",
y=expression("theta"))
chain <- metro_hasti(iter_num, 1.7, 0.1, log_=FALSE)
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() +
labs(x="Indeks",
y=expression(theta))
chain[1:500]
chain <- metro_hasti(iter_num, 1.7, 0.1, log_=FALSE)
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Celotno zaporedje")
ggplot(NULL, aes(x=1:500, y=chain[1:500])) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Prvih 500 členov zaporedja")
chain <- metro_hasti(iter_num, 1.7, 0.1, log_=FALSE)
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Celotno zaporedje")
ggplot(NULL, aes(x=1:500, y=chain[1:500])) +
geom_line() + geom_point() +
labs(x="Indeks",
y=expression(theta),
title="Prvih 500 členov zaporedja")
chain <- metro_hasti(iter_num, 1.6, 0.1, log_=FALSE)
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Celotno zaporedje")
ggplot(NULL, aes(x=1:500, y=chain[1:500])) +
geom_line() + geom_point() +
labs(x="Indeks",
y=expression(theta),
title="Prvih 500 členov zaporedja")
chain <- metro_hasti(iter_num, 1.5, 0.1, log_=FALSE)
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Celotno zaporedje")
ggplot(NULL, aes(x=1:500, y=chain[1:500])) +
geom_line() + geom_point() +
labs(x="Indeks",
y=expression(theta),
title="Prvih 500 členov zaporedja")
chain[-1:16]
chain[-16]
Negate(seq(1,16,1))
seq(1,16,1)
seq(1,16,1)*-1
chain[seq(1,16,1)*-1]
ggplot(NULL, aes(x=1:iter_num, y=chain)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Celotno zaporedje")
ggplot(NULL, aes(x=1:500, y=chain[1:500])) +
geom_line() + geom_point() +
labs(x="Indeks",
y=expression(theta),
title="Prvih 500 členov zaporedja")
chain_39k <- chain[seq(1,1000,1)*-1]
ggplot(NULL, aes(x=1001:iter_num, y=chain_39k)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Brez prvih 1000 členov zaporedja, ki predstavljajo burn-in")
ggplot(NULL, aes(x=chain_39k)) +
geom_histogram() +
labs(x=expression(theta),
y="Frekvenca",
title="Aposteriorna porazdelitev",
subtitle="pridobljena z Metropolis-Hastings algoritmom")
?dnorm
var_post <- 1/((1/sig_prior^2) + (length(x)/sig_like^2))
n <- length(x)
x_bar <- mean(x)
mu_post <- ((1/sig_prior^2)/((1/sig_prior^2)+(n/sig_like^2)))*mu_0 + ((n/sig_like^2)/((1/sig_prior^2)+(n/sig_like^2)))*x_bar
ggplot(NULL, aes(x=chain_39k)) +
geom_density() +
stat_function(fun = dnorm, args = list(mean=mu_post, sd=sqrt(var_post))) +
labs(x=expression(theta),
y="Gostota",
title="Aposteriorni porazdelitvi",
subtitle="pridobljena z algoritmom in analitična rešitev")
ggplot(NULL, aes(x=chain_39k)) +
geom_density()
ggplot(NULL, aes(x=chain_39k)) +
geom_density() +
stat_function(fun = dnorm, args = list(mean=mu_post, sd=sqrt(var_post)))
# get metropolis-hastings posterior chain for initial theta = 1.5, and proposal density
# standard deviation equal to 0.1 or variance equal to 0.1^2.
chain_df <- tibble(theta = metro_hasti(iter_num, 1.5, 0.1, log_=FALSE))
chain_df
ggplot(chain_df, aes(y=theta)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Celotno zaporedje")
ggplot(chain_df, aes(x=1:nrow(chain_df), y=theta)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Celotno zaporedje")
ggplot(chain_df %>% slice(1:500), aes(x=1:500, y=theta)) +
geom_line() + geom_point() +
labs(x="Indeks",
y=expression(theta),
title="Prvih 500 členov zaporedja")
ggplot(chain_df %>% slice(1000:n()), aes(x=1001:iter_num, y=theta)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Brez prvih 1000 členov zaporedja, ki predstavljajo burn-in")
ggplot(chain_df %>% slice(1001:n()), aes(x=1001:iter_num, y=theta)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Brez prvih 1000 členov zaporedja, ki predstavljajo burn-in")
ggplot(chain_df %>% slice(1001:n()), aes(x=1:nrow(chain_df), y=theta)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Brez prvih 1000 členov zaporedja, ki predstavljajo burn-in")
ggplot(chain_df %>% slice(1001:n()), aes(x=1:nrow(chain_df)-1, y=theta)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Brez prvih 1000 členov zaporedja, ki predstavljajo burn-in")
ggplot(chain_df %>% slice(1001:n()), aes(x=1:nrow(chain_df)+1, y=theta)) +
geom_line() +
labs(x="Indeks",
y=expression(theta),
title="Brez prvih 1000 členov zaporedja, ki predstavljajo burn-in")
chain_df %>% slice(1001:n())
nrow(chain_df)
ggplot(chain_df %>% slice(1001:n()), aes(x=theta)) +
geom_histogram() +
labs(x=expression(theta),
y="Frekvenca",
title="Aposteriorna porazdelitev",
subtitle="pridobljena z Metropolis-Hastings algoritmom")
ggplot(chain_df, aes(x=theta)) +
geom_density() +
stat_function(fun = dnorm, args = list(mean=mu_post, sd=sqrt(var_post))) +
labs(x=expression(theta),
y="Gostota",
title="Aposteriorni porazdelitvi",
subtitle="pridobljena z algoritmom in analitična rešitev")
ggplot(chain_df, aes(x=theta)) +
geom_density(color = "red") +
stat_function(fun = dnorm, args = list(mean=mu_post, sd=sqrt(var_post))) +
labs(x=expression(theta),
y="Gostota",
title="Aposteriorni porazdelitvi",
subtitle="pridobljena z algoritmom in analitična rešitev")
ggplot(chain_df %>% slice(1001:n()), aes(x=theta)) +
geom_density(color = "red") +
stat_function(fun = dnorm, args = list(mean=mu_post, sd=sqrt(var_post))) +
labs(x=expression(theta),
y="Gostota",
title="Aposteriorni porazdelitvi",
subtitle="pridobljena z algoritmom in analitična rešitev")
mean(chain_df %>% slice(1001:n()))
chain_df %>% slice(1001:n())
chain_df %>% slice(1001:n()) %>% unlist()
mean(chain_df %>% slice(1001:n()) %>% unlist())
